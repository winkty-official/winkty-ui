{
  "name": "input-field",
  "type": "registry:ui",
  "dependencies": ["class-variance-authority", "lucide-react"],
  "files": [
    {
      "name": "input-field.tsx",
      "type": "registry:ui",
      "path": "components/ui/input-field.tsx",
      "target": "components/ui/input-field.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { AlertCircle } from \"lucide-react\";\n\nconst inputFieldVariants = cva([\n  \"flex h-10 w-full rounded-sm bg-background px-3 py-2 text-sm ring-offset-background\",\n  \"file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground\",\n  \"placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2\",\n  \"disabled:cursor-not-allowed disabled:opacity-50\"\n], {\n  variants: {\n    variant: {\n      default: \"border border-input\",\n      outline: \"border border-input bg-transparent\",\n      ghost: \"border-none bg-transparent shadow-none\",\n      \"outline-bottom\": \"border-b border-input bg-transparent\"\n    },\n    inputSize: {\n      default: \"h-10 px-3 py-2\",\n      sm: \"h-8 px-2 py-1 text-xs\",\n      lg: \"h-12 px-4 py-3 text-base\"\n    },\n    state: {\n      default: \"focus-visible:ring-ring\",\n      error: \"border-destructive focus-visible:ring-destructive\",\n      success: \"border-success focus-visible:ring-success\"\n    }\n  },\n  defaultVariants: {\n    variant: \"default\",\n    inputSize: \"default\",\n    state: \"default\"\n  }\n});\n\nexport interface InputFieldProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    VariantProps<typeof inputFieldVariants> {\n  wrapperClassName?: string;\n  inputClassName?: string;\n  label?: string;\n  helperText?: string;\n  error?: boolean;\n  success?: boolean;\n  InputProps?: {\n    startAdornment?: React.ReactNode;\n    endAdornment?: React.ReactNode;\n    style?: React.CSSProperties;\n  };\n}\n\nconst InputField = React.forwardRef<HTMLInputElement, InputFieldProps>(\n  ({\n    wrapperClassName,\n    inputClassName,\n    type = \"text\",\n    label,\n    helperText,\n    error,\n    success,\n    variant,\n    inputSize,\n    InputProps,\n    required,\n    disabled,\n    ...props\n  }, ref) => {\n    const inputState = error ? \"error\" : success ? \"success\" : \"default\";\n\n    return (\n      <div\n        className={cn(\n          \"flex flex-col w-full space-y-1.5\",\n          disabled && \"opacity-50\",\n          wrapperClassName\n        )}\n      >\n        {label && (\n          <label\n            className={cn(\n              \"text-sm font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n              error && \"text-destructive\"\n            )}\n          >\n            {label}\n            {required && <span className=\"text-destructive ml-1\">*</span>}\n          </label>\n        )}\n        <div className=\"relative\">\n          {InputProps?.startAdornment && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n              {InputProps.startAdornment}\n            </div>\n          )}\n          <input\n            type={type}\n            className={cn(\n              inputFieldVariants({ variant, inputSize, state: inputState }),\n              InputProps?.startAdornment && \"pl-10\",\n              InputProps?.endAdornment && \"pr-10\",\n              inputClassName\n            )}\n            ref={ref}\n            aria-invalid={error}\n            aria-describedby={helperText ? `${props.id}-description` : undefined}\n            disabled={disabled}\n            required={required}\n            {...props}\n            style={InputProps?.style}\n          />\n          {InputProps?.endAdornment && (\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n              {InputProps.endAdornment}\n            </div>\n          )}\n          {error && !InputProps?.endAdornment && (\n            <AlertCircle className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 text-destructive\" />\n          )}\n        </div>\n        {helperText && (\n          <p\n            id={`${props.id}-description`}\n            className={cn(\n              \"text-xs\",\n              error ? \"text-destructive\" : success ? \"text-success\" : \"text-muted-foreground\"\n            )}\n          >\n            {helperText}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nInputField.displayName = \"InputField\";\n\nexport default InputField;"
    }
  ],
  "styles": [
    {
      "name": "input-field.css",
      "type": "registry:style",
      "target": "styles/input-field.css",
      "content": ".input-field-wrapper {\n  @apply flex flex-col w-full space-y-1.5;\n}\n\n.input-field-label {\n  @apply text-sm font-medium;\n}\n\n.input-field-error {\n  @apply text-destructive;\n}\n\n.input-field-helper-text {\n  @apply text-xs text-muted-foreground;\n}\n\n.input-field-helper-text-error {\n  @apply text-destructive;\n}\n\n.input-field-helper-text-success {\n  @apply text-success;\n}"
    }
  ],
  "author": "Rabin Avinash <hi@rabinkarmakar.com>",
  "title": "Input Field",
  "description": "A flexible and customizable input component with support for variants, sizes, states, labels, helper text, and decorations.",
  "features": [
    "Multiple input variants (default, outline, ghost)",
    "Different sizes (sm, default, lg)",
    "State handling (error, success)",
    "Label and helper text support",
    "Start and end adornments",
    "Accessibility features",
    "Full TypeScript support",
    "Customizable styling"
  ],
  "version": "1.0.0",
  "license": "MIT"
}
