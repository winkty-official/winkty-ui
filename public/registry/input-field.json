{
  "name": "input-field",
  "type": "registry:ui",
  "registryDependencies": [
    "utils"
  ],
  "dependencies": [
    "class-variance-authority"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport React from \"react\";\r\nimport { VariantProps, cva } from \"class-variance-authority\";\r\nimport { AlertCircle } from \"lucide-react\";\r\n\r\nconst inputFieldVariants = cva(\r\n  [\r\n    \"flex h-10 w-full rounded-sm bg-background px-3 py-2 text-sm ring-offset-background\",\r\n    \"file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground\",\r\n    \"placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 \",\r\n    \"disabled:cursor-not-allowed disabled:opacity-50 \",\r\n    \"[data-error='true'] \",\r\n  ],\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"border border-input\",\r\n        outline: \"border border-input bg-transparent\",\r\n        ghost: \"border-none bg-transparent shadow-none\",\r\n        \"outline-bottom\": \"border-b border-input bg-transparent\",\r\n      },\r\n      inputSize: {\r\n        default: \"h-10 px-3 py-2\",\r\n        sm: \"h-8 px-2 py-1 text-xs\",\r\n        lg: \"h-12 px-4 py-3 text-base\",\r\n      },\r\n      state: {\r\n        default: \"focus-visible:ring-ring\",\r\n        error: \"border-destructive focus-visible:ring-destructive\",\r\n        success: \"border-success focus-visible:ring-success\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      inputSize: \"default\",\r\n      state: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface InputFieldProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement>,\r\n    VariantProps<typeof inputFieldVariants> {\r\n  wrapperClassName?: string;\r\n  label?: string;\r\n  helperText?: string;\r\n  error?: boolean;\r\n  success?: boolean;\r\n  InputProps?: {\r\n    startAdornment?: React.ReactNode;\r\n    endAdornment?: React.ReactNode;\r\n    style?: React.CSSProperties;\r\n  };\r\n}\r\n\r\nconst InputField = React.forwardRef<HTMLInputElement, InputFieldProps>(\r\n  (\r\n    {\r\n      wrapperClassName,\r\n      type = \"text\",\r\n      label,\r\n      helperText,\r\n      error,\r\n      success,\r\n      variant,\r\n      inputSize,\r\n      InputProps,\r\n      required,\r\n      disabled,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const inputState = error ? \"error\" : success ? \"success\" : \"default\";\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          \"flex flex-col w-full space-y-1.5\",\r\n          disabled && \"opacity-50\",\r\n          wrapperClassName\r\n        )}\r\n        data-error={error}\r\n        data-success={success}\r\n        data-disabled={disabled}\r\n      >\r\n        {label && (\r\n          <label\r\n            className={cn(\r\n              \"text-sm font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\r\n              error && \"text-destructive\"\r\n            )}\r\n          >\r\n            {label}\r\n            {required && <span className=\"text-destructive ml-1\">*</span>}\r\n          </label>\r\n        )}\r\n        <div className=\"relative\">\r\n          {InputProps?.startAdornment && (\r\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\r\n              {InputProps.startAdornment}\r\n            </div>\r\n          )}\r\n          <input\r\n            {...props}\r\n            type={type}\r\n            className={cn(\r\n              inputFieldVariants({ variant, inputSize, state: inputState }),\r\n              InputProps?.startAdornment && \"pl-10\",\r\n              InputProps?.endAdornment && \"pr-10\",\r\n              props?.className\r\n            )}\r\n            ref={ref}\r\n            aria-invalid={error}\r\n            aria-describedby={\r\n              helperText ? `${props.id}-description` : undefined\r\n            }\r\n            disabled={disabled}\r\n            required={required}\r\n            style={InputProps?.style}\r\n          />\r\n          {InputProps?.endAdornment && (\r\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\r\n              {InputProps.endAdornment}\r\n            </div>\r\n          )}\r\n          {error && !InputProps?.endAdornment && (\r\n            <AlertCircle className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 text-destructive\" />\r\n          )}\r\n        </div>\r\n        {helperText && (\r\n          <p\r\n            id={`${props.id}-description`}\r\n            className={cn(\r\n              \"text-xs\",\r\n              error\r\n                ? \"text-destructive\"\r\n                : success\r\n                ? \"text-success\"\r\n                : \"text-muted-foreground\"\r\n            )}\r\n          >\r\n            {helperText}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nInputField.displayName = \"InputField\";\r\n\r\nexport default InputField;\r\n",
      "path": "ui/input-field.tsx",
      "target": "components/ui/input-field.tsx"
    }
  ]
}