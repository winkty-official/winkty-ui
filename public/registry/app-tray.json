{
  "name": "app-tray",
  "type": "registry:ui",
  "registryDependencies": [
    "utils"
  ],
  "dependencies": [
    "framer-motion",
    "zustand",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useRef,\n  useState,\n  RefObject,\n} from \"react\";\nimport { create } from \"zustand\";\nimport {\n  AnimatePresence,\n  motion,\n  MotionValue,\n  useSpring,\n  useTransform,\n  useMotionValue,\n} from \"framer-motion\";\n\n// Type Definitions\ninterface APPTRAYState {\n  openApps: Set<string>;\n  minimizeApps: Set<string>;\n  openApp: (appId: string) => void;\n  closeApp: (appId: string) => void;\n  minimizeApp: (appId: string) => void;\n  restoreApp: (appId: string) => void;\n}\n\n// Store Creation\nconst useAppTrayStore = create<APPTRAYState>((set) => ({\n  openApps: new Set<string>(),\n  minimizeApps: new Set<string>(),\n  openApp: (appId: string) =>\n    set((state) => {\n      const newOpenApps = new Set(state.openApps);\n      newOpenApps.add(appId);\n      return { openApps: newOpenApps };\n    }),\n  closeApp: (appId: string) =>\n    set((state) => {\n      const newOpenApps = new Set(state.openApps);\n      newOpenApps.delete(appId);\n      return { openApps: newOpenApps };\n    }),\n  minimizeApp: (appId: string) =>\n    set((state) => {\n      const newMinimizeApps = new Set(state.minimizeApps);\n      newMinimizeApps.add(appId);\n      const newOpenApps = new Set(state.openApps);\n      newOpenApps.delete(appId);\n      return { minimizeApps: newMinimizeApps, openApps: newOpenApps };\n    }),\n  restoreApp: (appId: string) =>\n    set((state) => {\n      const newMinimizeApps = new Set(state.minimizeApps);\n      newMinimizeApps.delete(appId);\n      const newOpenApps = new Set(state.openApps);\n      newOpenApps.add(appId);\n      return { minimizeApps: newMinimizeApps, openApps: newOpenApps };\n    }),\n}));\n\n// Context Definition\nconst APPTRAYContext = createContext<MotionValue<number> | null>(null);\n\n// Animation Configuration\nconst APPTRAY_ANIMATION_CONFIG = {\n  distanceInput: [-200, -100, 0, 100, 200],\n  sizeOutput: [35, 50, 70, 50, 35],\n  iconSizeOutput: [20, 30, 40, 30, 20],\n  spring: {\n    mass: 0.5,\n    stiffness: 100,\n    damping: 5,\n  },\n  bounces: [\n    { scale: 1.2, y: -10 },\n    { scale: 1, y: 0 },\n    { scale: 1.1, y: -5 },\n    { scale: 1, y: 0 },\n    { scale: 1.05, y: -2 },\n    { scale: 1, y: 0 },\n  ],\n  bounceDelay: 200,\n  loading: {\n    y: [0, -10, 0, -5, 0, -2, 0] as number[],\n    scale: [1, 1.2, 1, 1.1, 1, 1.05, 1] as number[],\n  },\n  transition: {\n    duration: 1.2,\n    times: [0, 0.2, 0.4, 0.6, 0.8, 0.9, 1],\n    ease: \"easeInOut\",\n  },\n  tooltip: {\n    initial: { opacity: 0, y: 10, x: \"-50%\" },\n    animate: { opacity: 1, y: 0, x: \"-50%\" },\n    exit: { opacity: 0, y: 2, x: \"-50%\" },\n  },\n} as const;\n\n// AppTray Component Props\ninterface APPTRAYProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\n/**\n * A appTray component that provides a container for appTray icons with mouse tracking capabilities.\n * @param {APPTRAYProps} props - The component props\n * @param {React.ReactNode} props.children - The appTray icons to render\n * @param {string} [props.className] - Additional CSS classes\n * @param {ForwardedRef<HTMLDivElement>} ref - Forwarded ref to the appTray container\n * @returns {JSX.Element} The appTray component\n */\nconst AppTray = forwardRef<HTMLDivElement, APPTRAYProps>(\n  ({ children, className }, ref) => {\n    const mouseX = useMotionValue(Number.POSITIVE_INFINITY);\n    const appTrayRef = useRef<HTMLDivElement>(null);\n    const resolvedRef = (ref as RefObject<HTMLDivElement>) || appTrayRef;\n\n    return (\n      <APPTRAYContext.Provider value={mouseX}>\n        <div\n          ref={resolvedRef}\n          className=\"absolute bottom-4 left-1/2 -translate-x-1/2\"\n        >\n          <motion.div\n            id=\"appTray-main\"\n            layoutId=\"window-appTray\"\n            onMouseMove={(e) => {\n              if ((e.target as HTMLElement).id === \"appTray-main\") {\n                mouseX.set(e.clientX);\n              }\n            }}\n            onMouseLeave={() => mouseX.set(Infinity)}\n            className={cn(\n              \"mx-auto hidden h-14 items-end gap-4 rounded-2xl bg-gray-50 px-4 pb-3 md:flex dark:bg-neutral-900\",\n              className,\n            )}\n            style={{\n              boxShadow: \"0 8px 32px rgba(0, 0, 0, 0.2)\",\n              border: \"1px solid rgba(255, 255, 255, 0.1)\",\n            }}\n          >\n            {children}\n          </motion.div>\n        </div>\n      </APPTRAYContext.Provider>\n    );\n  },\n);\nAppTray.displayName = \"AppTray\";\n\n// AppTrayIcon Component Props\ninterface APPTRAYIconProps {\n  id: string;\n  name: string;\n  icon?: React.ReactNode;\n  className?: string;\n}\n\n/**\n * A appTray icon component with hover animations and click handling.\n * @param {APPTRAYIconProps} props - The component props\n * @param {string} props.id - Unique identifier for the app\n * @param {string} props.name - Name of the app (displayed in tooltip)\n * @param {React.ReactNode} [props.icon] - Icon to display\n * @param {string} [props.className] - Additional CSS classes\n * @param {ForwardedRef<HTMLDivElement>} ref - Forwarded ref to the appTray icon\n * @returns {JSX.Element} The appTray icon component\n */\nconst AppTrayIcon = forwardRef<HTMLDivElement, APPTRAYIconProps>(\n  ({ id, name, icon, className }, ref) => {\n    const { openApp, openApps } = useAppTrayStore();\n    const isOpen = openApps.has(id);\n    const iconRef = useRef<HTMLDivElement>(null);\n    const resolvedRef = (ref as RefObject<HTMLDivElement>) || iconRef;\n    const { isLoading, handleClick } = useAPPTRAYAnimation(() => openApp(id));\n    const mouseX = useContext(APPTRAYContext);\n\n    if (!mouseX) {\n      throw new Error(\n        \"AppTrayIcon must be rendered within an AppTray component.\",\n      );\n    }\n    \n    const { width, height, widthIcon, heightIcon } = useAPPTRAYHover( mouseX, resolvedRef,);\n\n    const [hovered, setHovered] = useState(false);\n\n    return (\n      <motion.div\n        ref={resolvedRef}\n        style={{ width, height }}\n        animate={isLoading ? APPTRAY_ANIMATION_CONFIG.loading : undefined}\n        transition={APPTRAY_ANIMATION_CONFIG.transition}\n        onMouseEnter={() => setHovered(true)}\n        onMouseLeave={() => setHovered(false)}\n        onClick={handleClick}\n        className={cn(\n          \"relative flex aspect-square cursor-pointer items-center justify-center rounded-sm bg-gray-200 dark:bg-neutral-800\",\n          className,\n        )}\n      >\n        <AnimatePresence>\n          {hovered && (\n            <motion.div\n              {...APPTRAY_ANIMATION_CONFIG.tooltip}\n              className=\"absolute -top-8 left-1/2 w-fit -translate-x-1/2 whitespace-pre rounded-md border border-gray-200 bg-gray-100 px-2 py-0.5 text-xs text-neutral-700 dark:border-neutral-900 dark:bg-neutral-800 dark:text-white\"\n              aria-label=\"tooltip\"\n              aria-hidden={!hovered}\n            >\n              {name}\n            </motion.div>\n          )}\n        </AnimatePresence>\n        <motion.div\n          style={{ width: widthIcon, height: heightIcon }}\n          className=\"flex select-none items-center justify-center\"\n        >\n          {icon}\n        </motion.div>\n        {isOpen && (\n          <motion.div\n            className=\"absolute -bottom-3 left-1/2 h-1 w-1 -translate-x-1/2 rounded-full bg-white/20\"\n            layoutId={`indicator-${name}`}\n          />\n        )}\n      </motion.div>\n    );\n  },\n);\nAppTrayIcon.displayName = \"AppTrayIcon\";\n\n/**\n * Hook to handle appTray hover animations based on mouse position.\n * @param {MotionValue<number>} mouseX - The mouse X position motion value\n * @param {RefObject<HTMLElement>} ref - Reference to the appTray icon element\n * @returns {Object} Width and height transformations for the appTray icon and its inner icon\n */\nfunction useAPPTRAYHover(\n  mouseX: MotionValue<number>,\n  ref: RefObject<HTMLElement>,\n) {\n  const distance = useTransform(mouseX, (val) => {\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };\n    return val - bounds.x - bounds.width / 2;\n  });\n\n  const widthTransform = useTransform(\n    distance,\n    [...APPTRAY_ANIMATION_CONFIG.distanceInput],\n    [...APPTRAY_ANIMATION_CONFIG.sizeOutput],\n  ) as MotionValue<number>;\n  const heightTransform = useTransform(\n    distance,\n    [...APPTRAY_ANIMATION_CONFIG.distanceInput],\n    [...APPTRAY_ANIMATION_CONFIG.sizeOutput],\n  ) as MotionValue<number>;\n  const widthTransformIcon = useTransform(\n    distance,\n    [...APPTRAY_ANIMATION_CONFIG.distanceInput],\n    [...APPTRAY_ANIMATION_CONFIG.iconSizeOutput],\n  ) as MotionValue<number>;\n  const heightTransformIcon = useTransform(\n    distance,\n    [...APPTRAY_ANIMATION_CONFIG.distanceInput],\n    [...APPTRAY_ANIMATION_CONFIG.iconSizeOutput],\n  ) as MotionValue<number>;\n\n  const width = useSpring(widthTransform as unknown as number, {\n    ...APPTRAY_ANIMATION_CONFIG.spring,\n  });\n  const height = useSpring(heightTransform, {\n    ...APPTRAY_ANIMATION_CONFIG.spring,\n  });\n  const widthIcon = useSpring(widthTransformIcon, {\n    ...APPTRAY_ANIMATION_CONFIG.spring,\n  });\n  const heightIcon = useSpring(heightTransformIcon, {\n    ...APPTRAY_ANIMATION_CONFIG.spring,\n  });\n\n  return { width, height, widthIcon, heightIcon };\n}\n\n/**\n * Hook to manage appTray icon click animation and callback.\n * @param {() => void} onOpen - Callback to execute when animation completes\n * @returns {Object} Loading state and click handler\n */\nfunction useAPPTRAYAnimation(onOpen: () => void) {\n  const [isLoading, setIsLoading] = useState(false);\n  const bounceTimer = useRef<NodeJS.Timeout | null>(null);\n\n  const handleClick = useCallback(() => {\n    setIsLoading(true);\n\n    if (bounceTimer.current) {\n      clearTimeout(bounceTimer.current);\n    }\n\n    let delay = 0;\n    APPTRAY_ANIMATION_CONFIG.bounces.forEach((_, index) => {\n      bounceTimer.current = setTimeout(() => {\n        if (index === APPTRAY_ANIMATION_CONFIG.bounces.length - 1) {\n          setIsLoading(false);\n          onOpen();\n        }\n      }, delay);\n      delay += APPTRAY_ANIMATION_CONFIG.bounceDelay;\n    });\n  }, [onOpen]);\n\n  return { isLoading, handleClick };\n}\n\nexport { AppTray, AppTrayIcon, useAppTrayStore };\n",
      "path": "ui/app-tray.tsx",
      "target": "components/ui/app-tray.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { AnimatePresence, motion, useDragControls } from \"framer-motion\";\nimport { Minus, X } from \"lucide-react\";\nimport React, {\n  createContext,\n  forwardRef,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { create } from \"zustand\";\nimport { useAppTrayStore } from \"@/components/ui/app-tray\";\n\n// Store to manage z-index of windows\ninterface ZIndexState {\n  highestZIndex: number;\n  bringToFront: () => number;\n}\n\nexport const useZIndexStore = create<ZIndexState>((set, get) => ({\n  highestZIndex: 100, // Starting z-index (must be below dock)\n  bringToFront: () => {\n    set((state) => {\n      const newZIndex = state.highestZIndex + 1;\n      return { highestZIndex: newZIndex };\n    });\n    return get().highestZIndex;\n  },\n}));\n\n/**\n * Props for the AppWindow component.\n */\ninterface AppWindowProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The title of the application window.\n   */\n  title: string;\n\n  /**\n   * Unique identifier for the application.\n   */\n  appId: string;\n\n  /**\n   * Content inside the application window.\n   */\n  children: React.ReactNode;\n\n  /**\n   * Optional className for styling.\n   */\n  className?: string;\n\n  /**\n   * Optional ref for the window container.\n   */\n  containerRef?: React.RefObject<HTMLDivElement | null>;\n}\n\n/**\n * A draggable, animated application window component.\n *\n * @component\n * @example\n * ```tsx\n * <AppWindow title=\"My App\" appId=\"app-1\">\n *   <p>My app content</p>\n * </AppWindow>\n * ```\n *\n * @param {AppWindowProps} props - The component props.\n * @returns {JSX.Element} The rendered AppWindow component.\n */\nexport const AppWindow = forwardRef<HTMLDivElement, AppWindowProps>(\n  ({ title, children, appId, className, containerRef }, ref) => {\n    const { openApps, minimizeApp, closeApp } = useAppTrayStore();\n    const isOpen = openApps.has(appId);\n\n    const windowRef = useRef<HTMLDivElement>(null);\n    const mergedRef = (ref as React.RefObject<HTMLDivElement>) || windowRef;\n\n    const [minimizeTarget, setMinimizeTarget] = useState({ x: 0, y: 0 });\n    const [isMinimizing, setIsMinimizing] = useState(false);\n    const [isClosing, setIsClosing] = useState(false);\n\n    // Track zIndex of this window\n    const { highestZIndex, bringToFront } = useZIndexStore();\n    const [zIndex, setZIndex] = useState(highestZIndex);\n\n    const containerCtxRef = useContext(AppWindowContainerContext);\n    const dragContainerRef = containerRef || containerCtxRef;\n\n    useEffect(() => {\n      if (!isOpen) {\n        setIsMinimizing(false);\n        setIsClosing(false);\n      }\n    }, [isOpen]);\n\n    useLayoutEffect(() => {\n      if (isOpen) {\n        const height = mergedRef.current?.offsetHeight;\n        const width = mergedRef.current?.offsetWidth;\n        mergedRef.current?.style.setProperty(\"--window-height\", `${height}px`);\n        mergedRef.current?.style.setProperty(\"--window-width\", `${width}px`);\n      }\n    }, [isOpen, mergedRef]);\n\n    useEffect(() => {\n      const updateMinimizeTarget = () => {\n        const dockIcon = document.querySelector(\n          `[data-app=\"${title.toLowerCase()}\"]`,\n        );\n        if (dockIcon && mergedRef.current) {\n          const iconRect = dockIcon.getBoundingClientRect();\n          const windowRect = mergedRef.current.getBoundingClientRect();\n\n          setMinimizeTarget({\n            x:\n              iconRect.left -\n              windowRect.left +\n              (iconRect.width - windowRect.width) / 2,\n            y:\n              iconRect.top -\n              windowRect.top +\n              (iconRect.height - windowRect.height) / 2,\n          });\n        }\n      };\n\n      if (isOpen && !isMinimizing && !isClosing) {\n        updateMinimizeTarget();\n        window.addEventListener(\"resize\", updateMinimizeTarget);\n        return () => window.removeEventListener(\"resize\", updateMinimizeTarget);\n      }\n    }, [isOpen, isMinimizing, isClosing, title, mergedRef]);\n\n    const handleClose = (appId: string) => {\n      setIsClosing(true);\n      setTimeout(() => {\n        closeApp(appId);\n        setIsClosing(false);\n      }, 300);\n    };\n\n    const handleMinimize = (appId: string) => {\n      setIsMinimizing(true);\n      setTimeout(() => {\n        minimizeApp(appId);\n        setIsMinimizing(false);\n      }, 300);\n    };\n\n    const handleClick = () => {\n      setZIndex(bringToFront());\n    };\n\n    const dragControls = useDragControls();\n\n    return (\n      <AnimatePresence mode=\"wait\">\n        {isOpen && (\n          <motion.div\n            ref={mergedRef}\n            onMouseDown={handleClick} // Bring window to front when clicked\n            initial={{\n              cursor: \"grab\",\n              opacity: 0,\n              scale: 0.8,\n              y: 20,\n            }}\n            animate={\n              isMinimizing || isClosing\n                ? {\n                  scale: 0.5,\n                  opacity: 0,\n                  x: minimizeTarget.x,\n                  y: minimizeTarget.y,\n                  transition: {\n                    duration: 0.3,\n                    ease: [0.4, 0, 0.2, 1],\n                  },\n                }\n                : {\n                  scale: 1,\n                  opacity: 1,\n                  x: 0,\n                  y: 0,\n                  transition: {\n                    type: \"spring\",\n                    stiffness: 300,\n                    damping: 25,\n                  },\n                }\n            }\n            exit={{\n              scale: 0.8,\n              opacity: 0,\n              y: 20,\n              transition: {\n                duration: 0.2,\n              },\n            }}\n            className={`fixed inset-0 left-[30%] top-[30%] w-[600px] -translate-x-1/2 -translate-y-1/2 overflow-hidden rounded-lg bg-gray-800 shadow-2xl ${className}`}\n            style={{\n              transformOrigin: \"center center\",\n              pointerEvents: isMinimizing || isClosing ? \"none\" : \"auto\",\n              zIndex,\n            }}\n            layoutId={`window-${title.toLowerCase()}`}\n            drag\n            dragListener={false}\n            dragControls={dragControls}\n            dragMomentum={false}\n            whileDrag={{\n              cursor: \"grabbing\",\n            }}\n            {...(dragContainerRef && { dragConstraints: dragContainerRef })}\n          >\n            <motion.div\n              className=\"top-0 z-10 flex w-full items-center justify-between bg-gray-900 px-4 py-2\"\n              layout\n              onPointerDown={(e) => {\n                dragControls.start(e);\n              }}\n            >\n              <div className=\"group flex gap-2\">\n                <button\n                  onClick={() => handleClose(appId)}\n                  className=\"rounded-full bg-red-500 p-[.5] transition-colors hover:bg-red-600\"\n                >\n                  <X className=\"size-[0.625rem] text-black\" />\n                </button>\n                <button\n                  onClick={() => handleMinimize(appId)}\n                  className=\"rounded-full bg-yellow-500 p-[.5] transition-colors hover:bg-yellow-600\"\n                >\n                  <Minus className=\"size-[0.625rem] text-black\" />\n                </button>\n              </div>\n              <span className=\"pointer-events-none select-none text-sm text-gray-400\">\n                {title}\n              </span>\n              <div className=\"w-16\" />\n            </motion.div>\n            <motion.div\n              className=\"p-4\"\n              style={{\n                cursor: \"default\",\n              }}\n            >\n              {children}\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\n\nAppWindow.displayName = \"AppWindow\";\n\ninterface AppWindowContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The top position of the container. Can be a number (pixels) or a CSS string.\n   * @default \"74px\"\n   */\n  top?: number | string;\n\n  /**\n   * The bottom position of the container. Can be a number (pixels) or a CSS string.\n   * @default \"74px\"\n   */\n  bottom?: number | string;\n\n  /**\n   * Custom styles for the container. Allows full flexibility to override defaults.\n   */\n  style?: React.CSSProperties;\n}\n\nexport const AppWindowContainerContext =\n  createContext<React.RefObject<HTMLDivElement> | null>(null);\n\n/**\n * A container component that provides a fixed positioning context for draggable windows.\n * Allows dynamic styling and forward ref support for greater flexibility.\n *\n * @component\n * @example\n * ```tsx\n * <AppWindowContainer top=\"50px\" bottom=\"50px\" style={{ background: \"rgba(0,0,0,0.5)\" }}>\n *   <AppWindow title=\"My App\">App Content</AppWindow>\n * </AppWindowContainer>\n * ```\n *\n * @param {AppWindowContainerProps} props - The component props.\n * @returns {JSX.Element} The rendered AppWindowContainer component.\n */\nexport const AppWindowContainer = forwardRef<\n  HTMLDivElement,\n  AppWindowContainerProps\n>(\n  (\n    { children, top = \"74px\", bottom = \"74px\", className, style, ...props },\n    ref,\n  ) => {\n    const internalRef = useRef<HTMLDivElement>(null);\n    const containerRef =\n      (ref as React.RefObject<HTMLDivElement>) || internalRef;\n\n    return (\n      <AppWindowContainerContext.Provider value={containerRef}>\n        <div\n          ref={containerRef}\n          style={{\n            pointerEvents: \"none\",\n            position: \"fixed\",\n            top,\n            left: 0,\n            right: 0,\n            bottom,\n            ...style, // Merge custom styles\n          }}\n          className={className} // Allow custom class names\n          {...props} // Spread extra props (e.g., event handlers)\n        >\n          {children}\n        </div>\n      </AppWindowContainerContext.Provider>\n    );\n  },\n);\n\nAppWindowContainer.displayName = \"AppWindowContainer\";\n",
      "path": "ui/app-window.tsx",
      "target": "components/ui/app-window.tsx"
    }
  ]
}