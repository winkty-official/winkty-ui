{
  "name": "app-tray",
  "type": "registry:ui",
  "registryDependencies": [
    "utils"
  ],
  "dependencies": [
    "framer-motion",
    "zustand",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport  {\r\n  createContext,\r\n  forwardRef,\r\n  useCallback,\r\n  useContext,\r\n  useRef,\r\n  useState,\r\n  RefObject,\r\n} from \"react\";\r\nimport { create } from \"zustand\";\r\nimport {\r\n  AnimatePresence,\r\n  motion,\r\n  MotionValue,\r\n  useSpring,\r\n  useTransform,\r\n  useMotionValue,\r\n} from \"framer-motion\";\r\n\r\n// Type Definitions\r\ninterface APPTRAYState {\r\n  openApps: Set<string>;\r\n  minimizeApps: Set<string>;\r\n  openApp: (appId: string) => void;\r\n  closeApp: (appId: string) => void;\r\n  minimizeApp: (appId: string) => void;\r\n  restoreApp: (appId: string) => void;\r\n}\r\n\r\n// Store Creation\r\nconst useAppTrayStore = create<APPTRAYState>((set) => ({\r\n  openApps: new Set<string>(),\r\n  minimizeApps: new Set<string>(),\r\n  openApp: (appId: string) =>\r\n    set((state) => {\r\n      const newOpenApps = new Set(state.openApps);\r\n      newOpenApps.add(appId);\r\n      return { openApps: newOpenApps };\r\n    }),\r\n  closeApp: (appId: string) =>\r\n    set((state) => {\r\n      const newOpenApps = new Set(state.openApps);\r\n      newOpenApps.delete(appId);\r\n      return { openApps: newOpenApps };\r\n    }),\r\n  minimizeApp: (appId: string) =>\r\n    set((state) => {\r\n      const newMinimizeApps = new Set(state.minimizeApps);\r\n      newMinimizeApps.add(appId);\r\n      return { minimizeApps: newMinimizeApps };\r\n    }),\r\n  restoreApp: (appId: string) =>\r\n    set((state) => {\r\n      const newMinimizeApps = new Set(state.minimizeApps);\r\n      newMinimizeApps.delete(appId);\r\n      return { minimizeApps: newMinimizeApps };\r\n    }),\r\n}));\r\n\r\n// Context Definition\r\nconst APPTRAYContext = createContext<MotionValue<number> | null>(null);\r\n\r\n// Animation Configuration\r\nconst APPTRAY_ANIMATION_CONFIG = {\r\n  distanceInput: [-200, -100, 0, 100, 200],\r\n  sizeOutput: [35, 50, 70, 50, 35],\r\n  iconSizeOutput: [20, 30, 40, 30, 20],\r\n  spring: {\r\n    mass: 0.5,\r\n    stiffness: 100,\r\n    damping: 5,\r\n  },\r\n  bounces: [\r\n    { scale: 1.2, y: -10 },\r\n    { scale: 1, y: 0 },\r\n    { scale: 1.1, y: -5 },\r\n    { scale: 1, y: 0 },\r\n    { scale: 1.05, y: -2 },\r\n    { scale: 1, y: 0 },\r\n  ],\r\n  bounceDelay: 200,\r\n  loading: {\r\n    y: [0, -10, 0, -5, 0, -2, 0] as number[],\r\n    scale: [1, 1.2, 1, 1.1, 1, 1.05, 1] as number[],\r\n  },\r\n  transition: {\r\n    duration: 1.2,\r\n    times: [0, 0.2, 0.4, 0.6, 0.8, 0.9, 1],\r\n    ease: \"easeInOut\",\r\n  },\r\n  tooltip: {\r\n    initial: { opacity: 0, y: 10, x: \"-50%\" },\r\n    animate: { opacity: 1, y: 0, x: \"-50%\" },\r\n    exit: { opacity: 0, y: 2, x: \"-50%\" },\r\n  },\r\n} as const;\r\n\r\n// AppTray Component Props\r\ninterface APPTRAYProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * A appTray component that provides a container for appTray icons with mouse tracking capabilities.\r\n * @param {APPTRAYProps} props - The component props\r\n * @param {React.ReactNode} props.children - The appTray icons to render\r\n * @param {string} [props.className] - Additional CSS classes\r\n * @param {ForwardedRef<HTMLDivElement>} ref - Forwarded ref to the appTray container\r\n * @returns {JSX.Element} The appTray component\r\n */\r\nconst AppTray = forwardRef<HTMLDivElement, APPTRAYProps>(\r\n  ({ children, className }, ref) => {\r\n    const mouseX = useMotionValue(Number.POSITIVE_INFINITY);\r\n    const appTrayRef = useRef<HTMLDivElement>(null);\r\n    const resolvedRef = (ref as RefObject<HTMLDivElement>) || appTrayRef;\r\n\r\n    return (\r\n      <APPTRAYContext.Provider value={mouseX}>\r\n        <div\r\n          ref={resolvedRef}\r\n          className=\"fixed bottom-4 left-1/2 -translate-x-1/2\"\r\n        >\r\n          <motion.div\r\n            id=\"appTray-main\"\r\n            layoutId=\"window-appTray\"\r\n            onMouseMove={(e) => {\r\n              if ((e.target as HTMLElement).id === \"appTray-main\") {\r\n                mouseX.set(e.clientX);\r\n              }\r\n            }}\r\n            onMouseLeave={() => mouseX.set(Infinity)}\r\n            className={cn(\r\n              \"mx-auto hidden md:flex h-14 gap-4 items-end rounded-2xl bg-gray-50 dark:bg-neutral-900 px-4 pb-3\",\r\n              className\r\n            )}\r\n            style={{\r\n              boxShadow: \"0 8px 32px rgba(0, 0, 0, 0.2)\",\r\n              border: \"1px solid rgba(255, 255, 255, 0.1)\",\r\n            }}\r\n          >\r\n            {children}\r\n          </motion.div>\r\n        </div>\r\n      </APPTRAYContext.Provider>\r\n    );\r\n  }\r\n);\r\nAppTray.displayName = \"AppTray\";\r\n\r\n// AppTrayIcon Component Props\r\ninterface APPTRAYIconProps {\r\n  id: string;\r\n  name: string;\r\n  icon?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * A appTray icon component with hover animations and click handling.\r\n * @param {APPTRAYIconProps} props - The component props\r\n * @param {string} props.id - Unique identifier for the app\r\n * @param {string} props.name - Name of the app (displayed in tooltip)\r\n * @param {React.ReactNode} [props.icon] - Icon to display\r\n * @param {string} [props.className] - Additional CSS classes\r\n * @param {ForwardedRef<HTMLDivElement>} ref - Forwarded ref to the appTray icon\r\n * @returns {JSX.Element} The appTray icon component\r\n */\r\nconst AppTrayIcon = forwardRef<HTMLDivElement, APPTRAYIconProps>(\r\n  ({ id, name, icon, className }, ref) => {\r\n    const { openApp, openApps } = useAppTrayStore();\r\n    const isOpen = openApps.has(id);\r\n    const iconRef = useRef<HTMLDivElement>(null);\r\n    const resolvedRef = (ref as RefObject<HTMLDivElement>) || iconRef;\r\n    const { isLoading, handleClick } = useAPPTRAYAnimation(() => openApp(id));\r\n    const mouseX = useContext(APPTRAYContext);\r\n    const { width, height, widthIcon, heightIcon } = mouseX\r\n      ? useAPPTRAYHover(mouseX, resolvedRef)\r\n      : { width: 0, height: 0, widthIcon: 0, heightIcon: 0 };\r\n    const [hovered, setHovered] = useState(false);\r\n\r\n    return (\r\n      <motion.div\r\n        ref={resolvedRef}\r\n        style={{ width, height }}\r\n        animate={isLoading ? APPTRAY_ANIMATION_CONFIG.loading : undefined}\r\n        transition={APPTRAY_ANIMATION_CONFIG.transition}\r\n        onMouseEnter={() => setHovered(true)}\r\n        onMouseLeave={() => setHovered(false)}\r\n        onClick={handleClick}\r\n        className={cn(\r\n          \"aspect-square rounded-sm bg-gray-200 dark:bg-neutral-800 flex items-center justify-center relative cursor-pointer\",\r\n          className\r\n        )}\r\n      >\r\n        <AnimatePresence>\r\n          {hovered && (\r\n            <motion.div\r\n              {...APPTRAY_ANIMATION_CONFIG.tooltip}\r\n              className=\"px-2 py-0.5 whitespace-pre rounded-md bg-gray-100 border dark:bg-neutral-800 dark:border-neutral-900 dark:text-white border-gray-200 text-neutral-700 absolute left-1/2 -translate-x-1/2 -top-8 w-fit text-xs\"\r\n              aria-label=\"tooltip\"\r\n              aria-hidden={!hovered}\r\n            >\r\n              {name}\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n        <motion.div\r\n          style={{ width: widthIcon, height: heightIcon }}\r\n          className=\"flex items-center justify-center select-none\"\r\n        >\r\n          {icon}\r\n        </motion.div>\r\n        {isOpen && (\r\n          <motion.div\r\n            className=\"absolute -bottom-3 left-1/2 h-1 w-1 -translate-x-1/2 rounded-full bg-white/20\"\r\n            layoutId={`indicator-${name}`}\r\n          />\r\n        )}\r\n      </motion.div>\r\n    );\r\n  }\r\n);\r\nAppTrayIcon.displayName = \"AppTrayIcon\";\r\n\r\n/**\r\n * Hook to handle appTray hover animations based on mouse position.\r\n * @param {MotionValue<number>} mouseX - The mouse X position motion value\r\n * @param {RefObject<HTMLElement>} ref - Reference to the appTray icon element\r\n * @returns {Object} Width and height transformations for the appTray icon and its inner icon\r\n */\r\nfunction useAPPTRAYHover(\r\n  mouseX: MotionValue<number>,\r\n  ref: RefObject<HTMLElement>\r\n) {\r\n  const distance = useTransform(mouseX, (val) => {\r\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };\r\n    return val - bounds.x - bounds.width / 2;\r\n  });\r\n\r\n  const widthTransform = useTransform(\r\n    distance,\r\n    [...APPTRAY_ANIMATION_CONFIG.distanceInput],\r\n    [...APPTRAY_ANIMATION_CONFIG.sizeOutput]\r\n  ) as MotionValue<number>;\r\n  const heightTransform = useTransform(\r\n    distance,\r\n    [...APPTRAY_ANIMATION_CONFIG.distanceInput],\r\n    [...APPTRAY_ANIMATION_CONFIG.sizeOutput]\r\n  ) as MotionValue<number>;\r\n  const widthTransformIcon = useTransform(\r\n    distance,\r\n    [...APPTRAY_ANIMATION_CONFIG.distanceInput],\r\n    [...APPTRAY_ANIMATION_CONFIG.iconSizeOutput]\r\n  ) as MotionValue<number>;\r\n  const heightTransformIcon = useTransform(\r\n    distance,\r\n    [...APPTRAY_ANIMATION_CONFIG.distanceInput],\r\n    [...APPTRAY_ANIMATION_CONFIG.iconSizeOutput]\r\n  ) as MotionValue<number>;\r\n\r\n  const width = useSpring(widthTransform as unknown as number, {\r\n    ...APPTRAY_ANIMATION_CONFIG.spring,\r\n  });\r\n  const height = useSpring(heightTransform, {\r\n    ...APPTRAY_ANIMATION_CONFIG.spring,\r\n  });\r\n  const widthIcon = useSpring(widthTransformIcon, {\r\n    ...APPTRAY_ANIMATION_CONFIG.spring,\r\n  });\r\n  const heightIcon = useSpring(heightTransformIcon, {\r\n    ...APPTRAY_ANIMATION_CONFIG.spring,\r\n  });\r\n\r\n  return { width, height, widthIcon, heightIcon };\r\n}\r\n\r\n/**\r\n * Hook to manage appTray icon click animation and callback.\r\n * @param {() => void} onOpen - Callback to execute when animation completes\r\n * @returns {Object} Loading state and click handler\r\n */\r\nfunction useAPPTRAYAnimation(onOpen: () => void) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const bounceTimer = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const handleClick = useCallback(() => {\r\n    setIsLoading(true);\r\n\r\n    if (bounceTimer.current) {\r\n      clearTimeout(bounceTimer.current);\r\n    }\r\n\r\n    let delay = 0;\r\n    APPTRAY_ANIMATION_CONFIG.bounces.forEach((_, index) => {\r\n      bounceTimer.current = setTimeout(() => {\r\n        if (index === APPTRAY_ANIMATION_CONFIG.bounces.length - 1) {\r\n          setIsLoading(false);\r\n          onOpen();\r\n        }\r\n      }, delay);\r\n      delay += APPTRAY_ANIMATION_CONFIG.bounceDelay;\r\n    });\r\n  }, [onOpen]);\r\n\r\n  return { isLoading, handleClick };\r\n}\r\n\r\nexport { AppTray, AppTrayIcon, useAppTrayStore };",
      "path": "ui/app-tray.tsx",
      "target": "components/ui/app-tray.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import { AnimatePresence, motion, useDragControls } from \"framer-motion\";\r\nimport { Minus, X } from \"lucide-react\";\r\nimport React, {\r\n  createContext,\r\n  forwardRef,\r\n  useContext,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { create } from \"zustand\";\r\nimport { useAppTrayStore } from \"@/components/ui/app-tray\";\r\n\r\n// Store to manage z-index of windows\r\ninterface ZIndexState {\r\n  highestZIndex: number;\r\n  bringToFront: () => number;\r\n}\r\n\r\nexport const useZIndexStore = create<ZIndexState>((set, get) => ({\r\n  highestZIndex: 100, // Starting z-index (must be below dock)\r\n  bringToFront: () => {\r\n    set((state) => {\r\n      const newZIndex = state.highestZIndex + 1;\r\n      return { highestZIndex: newZIndex };\r\n    });\r\n    return get().highestZIndex;\r\n  },\r\n}));\r\n\r\n/**\r\n * Props for the AppWindow component.\r\n */\r\ninterface AppWindowProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * The title of the application window.\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * Unique identifier for the application.\r\n   */\r\n  appId: string;\r\n\r\n  /**\r\n   * Content inside the application window.\r\n   */\r\n  children: React.ReactNode;\r\n\r\n  /**\r\n   * Optional className for styling.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Optional ref for the window container.\r\n   */\r\n  containerRef?: React.RefObject<HTMLDivElement | null>;\r\n}\r\n\r\n/**\r\n * A draggable, animated application window component.\r\n *\r\n * @component\r\n * @example\r\n * ```tsx\r\n * <AppWindow title=\"My App\" appId=\"app-1\">\r\n *   <p>My app content</p>\r\n * </AppWindow>\r\n * ```\r\n *\r\n * @param {AppWindowProps} props - The component props.\r\n * @returns {JSX.Element} The rendered AppWindow component.\r\n */\r\nexport const AppWindow = forwardRef<HTMLDivElement, AppWindowProps>(\r\n  ({ title, children, appId, className, containerRef }, ref) => {\r\n    const { openApps, minimizeApp, closeApp } = useAppTrayStore();\r\n    const isOpen = openApps.has(appId);\r\n\r\n    const windowRef = useRef<HTMLDivElement>(null);\r\n    const mergedRef = (ref as React.RefObject<HTMLDivElement>) || windowRef;\r\n\r\n    const [minimizeTarget, setMinimizeTarget] = useState({ x: 0, y: 0 });\r\n    const [isMinimizing, setIsMinimizing] = useState(false);\r\n    const [isClosing, setIsClosing] = useState(false);\r\n\r\n    // Track zIndex of this window\r\n    const { highestZIndex, bringToFront } = useZIndexStore();\r\n    const [zIndex, setZIndex] = useState(highestZIndex);\r\n\r\n    const containerCtxRef = useContext(AppWindowContainerContext);\r\n    const dragContainerRef = containerRef || containerCtxRef;\r\n\r\n    useEffect(() => {\r\n      if (!isOpen) {\r\n        setIsMinimizing(false);\r\n        setIsClosing(false);\r\n      }\r\n    }, [isOpen]);\r\n\r\n    useLayoutEffect(() => {\r\n      if (isOpen) {\r\n        const height = mergedRef.current?.offsetHeight;\r\n        const width = mergedRef.current?.offsetWidth;\r\n        mergedRef.current?.style.setProperty(\"--window-height\", `${height}px`);\r\n        mergedRef.current?.style.setProperty(\"--window-width\", `${width}px`);\r\n      }\r\n    }, [isOpen]);\r\n\r\n    useEffect(() => {\r\n      const updateMinimizeTarget = () => {\r\n        const dockIcon = document.querySelector(\r\n          `[data-app=\"${title.toLowerCase()}\"]`,\r\n        );\r\n        if (dockIcon && mergedRef.current) {\r\n          const iconRect = dockIcon.getBoundingClientRect();\r\n          const windowRect = mergedRef.current.getBoundingClientRect();\r\n\r\n          setMinimizeTarget({\r\n            x:\r\n              iconRect.left -\r\n              windowRect.left +\r\n              (iconRect.width - windowRect.width) / 2,\r\n            y:\r\n              iconRect.top -\r\n              windowRect.top +\r\n              (iconRect.height - windowRect.height) / 2,\r\n          });\r\n        }\r\n      };\r\n\r\n      if (isOpen && !isMinimizing && !isClosing) {\r\n        updateMinimizeTarget();\r\n        window.addEventListener(\"resize\", updateMinimizeTarget);\r\n        return () => window.removeEventListener(\"resize\", updateMinimizeTarget);\r\n      }\r\n    }, [isOpen, isMinimizing, isClosing, title]);\r\n\r\n    const handleClose = (appId: string) => {\r\n      setIsClosing(true);\r\n      setTimeout(() => {\r\n        closeApp(appId);\r\n        setIsClosing(false);\r\n      }, 300);\r\n    };\r\n\r\n    const handleMinimize = (appId: string) => {\r\n      setIsMinimizing(true);\r\n      setTimeout(() => {\r\n        minimizeApp(appId);\r\n        setIsMinimizing(false);\r\n      }, 300);\r\n    };\r\n\r\n    const handleClick = () => {\r\n      setZIndex(bringToFront());\r\n    };\r\n\r\n    const dragControls = useDragControls();\r\n\r\n    return (\r\n      <AnimatePresence mode=\"wait\">\r\n        {isOpen && (\r\n          <motion.div\r\n            ref={mergedRef}\r\n            onMouseDown={handleClick} // Bring window to front when clicked\r\n            initial={{\r\n              cursor: \"grab\",\r\n              opacity: 0,\r\n              scale: 0.8,\r\n              y: 20,\r\n            }}\r\n            animate={\r\n              isMinimizing || isClosing\r\n                ? {\r\n                    scale: 0.5,\r\n                    opacity: 0,\r\n                    x: minimizeTarget.x,\r\n                    y: minimizeTarget.y,\r\n                    transition: {\r\n                      duration: 0.3,\r\n                      ease: [0.4, 0, 0.2, 1],\r\n                    },\r\n                  }\r\n                : {\r\n                    scale: 1,\r\n                    opacity: 1,\r\n                    x: 0,\r\n                    y: 0,\r\n                    transition: {\r\n                      type: \"spring\",\r\n                      stiffness: 300,\r\n                      damping: 25,\r\n                    },\r\n                  }\r\n            }\r\n            exit={{\r\n              scale: 0.8,\r\n              opacity: 0,\r\n              y: 20,\r\n              transition: {\r\n                duration: 0.2,\r\n              },\r\n            }}\r\n            className={`fixed inset-0 left-[30%] top-[30%] w-[600px] -translate-x-1/2 -translate-y-1/2 overflow-hidden rounded-lg bg-gray-800 shadow-2xl ${className}`}\r\n            style={{\r\n              transformOrigin: \"center center\",\r\n              pointerEvents: isMinimizing || isClosing ? \"none\" : \"auto\",\r\n              zIndex,\r\n            }}\r\n            layoutId={`window-${title.toLowerCase()}`}\r\n            drag\r\n            dragListener={false}\r\n            dragControls={dragControls}\r\n            dragMomentum={false}\r\n            whileDrag={{\r\n              cursor: \"grabbing\",\r\n            }}\r\n            {...(dragContainerRef && { dragConstraints: dragContainerRef })}\r\n          >\r\n            <motion.div\r\n              className=\"top-0 z-10 flex w-full items-center justify-between bg-gray-900 px-4 py-2\"\r\n              layout\r\n              onPointerDown={(e) => {\r\n                dragControls.start(e);\r\n              }}\r\n            >\r\n              <div className=\"group flex gap-2\">\r\n                <button\r\n                  onClick={() => handleClose(appId)}\r\n                  className=\"rounded-full bg-red-500 p-[.5] transition-colors hover:bg-red-600\"\r\n                >\r\n                  <X className=\"size-[0.625rem] text-black\" />\r\n                </button>\r\n                <button\r\n                  onClick={() => handleMinimize(appId)}\r\n                  className=\"rounded-full bg-yellow-500 p-[.5] transition-colors hover:bg-yellow-600\"\r\n                >\r\n                  <Minus className=\"size-[0.625rem] text-black\" />\r\n                </button>\r\n              </div>\r\n              <span className=\"select-none pointer-events-none text-sm text-gray-400\">{title}</span>\r\n              <div className=\"w-16\" />\r\n            </motion.div>\r\n            <motion.div\r\n              className=\"p-4\"\r\n              style={{\r\n                cursor: \"default\",\r\n              }}\r\n            >\r\n              {children}\r\n            </motion.div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    );\r\n  },\r\n);\r\n\r\nAppWindow.displayName = \"AppWindow\";\r\n\r\ninterface AppWindowContainerProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * The top position of the container. Can be a number (pixels) or a CSS string.\r\n   * @default \"74px\"\r\n   */\r\n  top?: number | string;\r\n\r\n  /**\r\n   * The bottom position of the container. Can be a number (pixels) or a CSS string.\r\n   * @default \"74px\"\r\n   */\r\n  bottom?: number | string;\r\n\r\n  /**\r\n   * Custom styles for the container. Allows full flexibility to override defaults.\r\n   */\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nexport const AppWindowContainerContext =\r\n  createContext<React.RefObject<HTMLDivElement> | null>(null);\r\n\r\n/**\r\n * A container component that provides a fixed positioning context for draggable windows.\r\n * Allows dynamic styling and forward ref support for greater flexibility.\r\n *\r\n * @component\r\n * @example\r\n * ```tsx\r\n * <AppWindowContainer top=\"50px\" bottom=\"50px\" style={{ background: \"rgba(0,0,0,0.5)\" }}>\r\n *   <AppWindow title=\"My App\">App Content</AppWindow>\r\n * </AppWindowContainer>\r\n * ```\r\n *\r\n * @param {AppWindowContainerProps} props - The component props.\r\n * @returns {JSX.Element} The rendered AppWindowContainer component.\r\n */\r\nexport const AppWindowContainer = forwardRef<\r\n  HTMLDivElement,\r\n  AppWindowContainerProps\r\n>(\r\n  (\r\n    { children, top = \"74px\", bottom = \"74px\", className, style, ...props },\r\n    ref,\r\n  ) => {\r\n    const internalRef = useRef<HTMLDivElement>(null);\r\n    const containerRef =\r\n      (ref as React.RefObject<HTMLDivElement>) || internalRef;\r\n\r\n    return (\r\n      <AppWindowContainerContext.Provider value={containerRef}>\r\n        <div\r\n          ref={containerRef}\r\n          style={{\r\n            pointerEvents: \"none\",\r\n            position: \"fixed\",\r\n            top,\r\n            left: 0,\r\n            right: 0,\r\n            bottom,\r\n            ...style, // Merge custom styles\r\n          }}\r\n          className={className} // Allow custom class names\r\n          {...props} // Spread extra props (e.g., event handlers)\r\n        >\r\n          {children}\r\n        </div>\r\n      </AppWindowContainerContext.Provider>\r\n    );\r\n  },\r\n);\r\n\r\nAppWindowContainer.displayName = \"AppWindowContainer\";\r\n",
      "path": "ui/app-window.tsx",
      "target": "components/ui/app-window.tsx"
    }
  ]
}