{
  "name": "file-tree",
  "type": "registry:ui",
  "registryDependencies": [
    "card",
    "utils"
  ],
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { useState } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  ChevronRight,\r\n  Folder,\r\n  FolderOpen,\r\n  FileIcon,\r\n  FolderIcon,\r\n} from \"lucide-react\";\r\n\r\ninterface FileIconProps {\r\n  type: \"file\" | \"folder\";\r\n  className?: string;\r\n}\r\n\r\ninterface FileNode {\r\n  name: string;\r\n  type: \"file\" | \"folder\";\r\n  children?: FileNode[];\r\n  icon?: string;\r\n}\r\n\r\ninterface FileTreeProps {\r\n  files: FileNode[];\r\n  className?: string;\r\n  activeSelect?: string;\r\n  onSelect?: (path: string) => void;\r\n}\r\n\r\ninterface TreeNodeProps {\r\n  node: FileNode;\r\n  level?: number;\r\n  basePath: string;\r\n  selectedPath: string;\r\n  onSelect: (path: string) => void;\r\n}\r\n\r\nfunction FileTree({\r\n  files,\r\n  className,\r\n  activeSelect,\r\n  onSelect,\r\n}: Readonly<FileTreeProps>) {\r\n  const [selectedPath, setSelectedPath] = useState<string>(activeSelect ?? \"\");\r\n\r\n  const handleSelect = (path: string) => {\r\n    setSelectedPath(path);\r\n    onSelect?.(path);\r\n  };\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <div className=\"p-4\">\r\n        {files.map((file, index) => (\r\n          <TreeNode\r\n            key={`${file.name}-${index}`}\r\n            node={file}\r\n            basePath={file.name}\r\n            selectedPath={selectedPath}\r\n            onSelect={handleSelect}\r\n          />\r\n        ))}\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction TreeNode({\r\n  node,\r\n  level = 0,\r\n  basePath,\r\n  selectedPath,\r\n  onSelect,\r\n}: Readonly<TreeNodeProps>) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const hasChildren = node.children && node.children.length > 0;\r\n  const isSelected = selectedPath === basePath;\r\n\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    onSelect(basePath);\r\n    if (hasChildren) {\r\n      setIsOpen(!isOpen);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <motion.div\r\n        className={cn(\r\n          \"flex items-center gap-2 p-2 rounded-lg hover:bg-accent cursor-pointer relative group\"\r\n        )}\r\n        // Indent each level (e.g. 16px per level)\r\n        style={{ marginLeft: level * 16 }}\r\n        onClick={handleClick}\r\n        whileHover={{ scale: 1.01 }}\r\n        transition={{ duration: 0.2 }}\r\n      >\r\n        <motion.div\r\n          className=\"absolute inset-0 rounded-lg bg-primary/10\"\r\n          initial={false}\r\n          animate={{\r\n            opacity: isSelected ? 1 : 0,\r\n            scale: isSelected ? 1 : 0.95,\r\n          }}\r\n          transition={{ duration: 0.2 }}\r\n        />\r\n        <div className=\"flex items-center gap-2 relative\">\r\n          <div className=\"w-4 flex items-center\">\r\n            {hasChildren && (\r\n              <motion.div\r\n                animate={{ rotate: isOpen ? 90 : 0 }}\r\n                transition={{ duration: 0.2 }}\r\n              >\r\n                <ChevronRight className=\"h-4 w-4\" />\r\n              </motion.div>\r\n            )}\r\n          </div>\r\n          <div className=\"w-4 flex items-center\">\r\n            {node.type === \"folder\" ? (\r\n              <>\r\n                {isOpen ? (\r\n                  <FolderOpen className=\"h-4 w-4 text-primary\" />\r\n                ) : (\r\n                  <Folder className=\"h-4 w-4 text-primary\" />\r\n                )}\r\n              </>\r\n            ) : (\r\n              <FileTypeIcon\r\n                type={node.type}\r\n                className={cn(\"h-4 w-4\", \"text-primary\")}\r\n              />\r\n            )}\r\n          </div>\r\n          <span\r\n            className={cn(\"text-sm\", node.type === \"folder\" && \"font-medium\")}\r\n          >\r\n            {node.name}\r\n          </span>\r\n        </div>\r\n      </motion.div>\r\n\r\n      <AnimatePresence>\r\n        {isOpen && hasChildren && (\r\n          <motion.div\r\n            initial={{ opacity: 0, height: 0 }}\r\n            animate={{ opacity: 1, height: \"auto\" }}\r\n            exit={{ opacity: 0, height: 0 }}\r\n            transition={{ duration: 0.2 }}\r\n          >\r\n            {node.children?.map((child, index) => (\r\n              <TreeNode\r\n                key={`${child.name}-${index}`}\r\n                node={child}\r\n                level={level + 1}\r\n                basePath={`${basePath}/${child.name}`}\r\n                selectedPath={selectedPath}\r\n                onSelect={onSelect}\r\n              />\r\n            ))}\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FileTypeIcon({ type, className }: Readonly<FileIconProps>) {\r\n  if (type === \"folder\") {\r\n    return <FolderIcon className={className} />;\r\n  }\r\n  return <FileIcon className={className} />;\r\n}\r\n\r\nexport { FileTree, TreeNode, FileTypeIcon };\r\n",
      "path": "ui/file-tree.tsx",
      "target": "components/ui/file-tree.tsx"
    }
  ]
}