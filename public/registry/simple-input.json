{
  "name": "simple-input",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-icons",
    "class-variance-authority",
    "lucide-react"
  ],
  "files": [
    {
      "dir": "components/base/inputs/simple-input.tsx",
      "type": "registry:ui",
      "name": "simple-input.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { AlertCircle } from \"lucide-react\";\n\n// Define input variants using class-variance-authority\nconst inputVariants = cva(\n  [\n    \"flex h-10 w-full rounded-sm bg-background px-3 py-2 text-sm ring-offset-background\",\n    \"file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground\",\n    \"placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2\",\n    \"disabled:cursor-not-allowed disabled:opacity-50\",\n  ],\n  {\n    variants: {\n      variant: {\n        default: \"border border-input\",\n        outline: \"border border-input bg-transparent\",\n        ghost: \"border-none bg-transparent shadow-none\",\n      },\n      inputSize: {\n        default: \"h-10 px-3 py-2\",\n        sm: \"h-8 px-2 py-1 text-xs\",\n        lg: \"h-12 px-4 py-3 text-base\",\n      },\n      state: {\n        default: \"focus-visible:ring-ring\",\n        error: \"border-destructive focus-visible:ring-destructive\",\n        success: \"border-success focus-visible:ring-success\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      inputSize: \"default\",\n      state: \"default\",\n    },\n  }\n);\n\nexport interface SimpleInputProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    VariantProps<typeof inputVariants> {\n  /** Additional className for the input wrapper */\n  wrapperClassName?: string;\n  /** Additional className for the input element */\n  inputClassName?: string;\n  /** Label text */\n  label?: string;\n  /** Helper or error text shown below the input */\n  helperText?: string;\n  /** Whether the input is in an error state */\n  error?: boolean;\n  /** Whether the input is in a success state */\n  success?: boolean;\n  /** Props for input decorations */\n  InputProps?: {\n    /** Element to show before the input */\n    startAdornment?: React.ReactNode;\n    /** Element to show after the input */\n    endAdornment?: React.ReactNode;\n    /** Custom styles for the input element */\n    style?: React.CSSProperties;\n  };\n}\n\nconst SimpleInput = React.forwardRef<HTMLInputElement, SimpleInputProps>(\n  (\n    {\n      wrapperClassName,\n      inputClassName,\n      type = \"text\",\n      label,\n      helperText,\n      error,\n      success,\n      variant,\n      inputSize,\n      InputProps,\n      required,\n      disabled,\n      ...props\n    },\n    ref\n  ) => {\n    // Determine the input state\n    const inputState = error ? \"error\" : success ? \"success\" : \"default\";\n\n    return (\n      <div\n        className={cn(\n          \"flex flex-col w-full space-y-1.5\",\n          disabled && \"opacity-50\",\n          wrapperClassName\n        )}\n      >\n        {label && (\n          <label\n            className={cn(\n              \"text-sm font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n              error && \"text-destructive\"\n            )}\n          >\n            {label}\n            {required && <span className=\"text-destructive ml-1\">*</span>}\n          </label>\n        )}\n        <div className=\"relative\">\n          {InputProps?.startAdornment && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n              {InputProps.startAdornment}\n            </div>\n          )}\n          <input\n            type={type}\n            className={cn(\n              inputVariants({ variant, inputSize, state: inputState }),\n              InputProps?.startAdornment && \"pl-10\",\n              InputProps?.endAdornment && \"pr-10\",\n              inputClassName\n            )}\n            ref={ref}\n            aria-invalid={error}\n            aria-describedby={\n              helperText ? `${props.id}-description` : undefined\n            }\n            disabled={disabled}\n            required={required}\n            {...props}\n            style={InputProps?.style}\n          />\n          {InputProps?.endAdornment && (\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n              {InputProps.endAdornment}\n            </div>\n          )}\n          {error && !InputProps?.endAdornment && (\n            <AlertCircle className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 text-destructive\" />\n          )}\n        </div>\n        {helperText && (\n          <p\n            id={`${props.id}-description`}\n            className={cn(\n              \"text-xs\",\n              error\n                ? \"text-destructive\"\n                : success\n                ? \"text-success\"\n                : \"text-muted-foreground\"\n            )}\n          >\n            {helperText}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nSimpleInput.displayName = \"SimpleInput\";\n\nexport default SimpleInput;"
    }
  ],
  "author": "Rabin Karmakar <hi@rabinkarmakar.com>",
  "title": "Simple Input Component",
  "description": "A flexible and customizable input component with support for variants, sizes, states, labels, helper text, and decorations."
}
