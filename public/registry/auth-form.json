{
  "name": "auth-form",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "form",
    "utils"
  ],
  "dependencies": [
    "zod",
    "react-hook-form",
    "lucide-react",
    "@hookform/resolvers"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { Eye, EyeClosed } from \"lucide-react\";\r\nimport Link from \"next/link\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  DefaultValues,\r\n  FieldValues,\r\n  Path,\r\n  SubmitHandler,\r\n  useForm,\r\n  UseFormReturn,\r\n} from \"react-hook-form\";\r\nimport { ZodType } from \"zod\";\r\nimport InputField from \"@/components/library/input-field\";\r\n\r\ninterface AuthFormProps<T extends FieldValues> {\r\n  type: \"SIGN_IN\" | \"SIGN_UP\" | \"FORGOT_PASSWORD\" | \"RESET_PASSWORD\";\r\n  onSubmit: (data: T) => void;\r\n  schema: ZodType<T>;\r\n  defaultValues: T;\r\n  authTitle?: string;\r\n  authDescription?: string;\r\n  loading?: boolean;\r\n  providers?: string[];\r\n}\r\n\r\nconst AuthForm = <T extends FieldValues>({\r\n  type,\r\n  defaultValues,\r\n  onSubmit,\r\n  schema,\r\n  authTitle,\r\n  authDescription,\r\n  loading,\r\n  providers,\r\n}: AuthFormProps<T>) => {\r\n  const isSignIn = type === \"SIGN_IN\";\r\n  const isForgotPassword = type === \"FORGOT_PASSWORD\";\r\n  const isSignUp = type === \"SIGN_UP\";\r\n  const isResetPassword = type === \"RESET_PASSWORD\";\r\n\r\n  const form: UseFormReturn<T> = useForm({\r\n    resolver: zodResolver(schema),\r\n    defaultValues: defaultValues as DefaultValues<T>,\r\n  });\r\n\r\n  // State to track whether to show password fields as plain text.\r\n  const [showPasswords, setShowPasswords] = useState<{\r\n    [key: string]: boolean;\r\n  }>({\r\n    password: false,\r\n    confirmPassword: false,\r\n  });\r\n\r\n  const handleSubmit: SubmitHandler<T> = async (data) => {\r\n    console.log(\"ðŸš€ ~ handleSubmit ~ data:\", data);\r\n    try {\r\n      if (!data) return;\r\n      await onSubmit(data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const getButtonText = () => {\r\n    if (isSignIn) return \"Sign In\";\r\n    if (isSignUp) return \"Sign Up\";\r\n    if (isForgotPassword) return \"Send Reset Link\";\r\n    if (isResetPassword) return \"Reset Password\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"space-y-2 text-center\">\r\n        <h2 className=\"font-semibold tracking-tight\">{authTitle}</h2>\r\n        <p className=\"text-sm text-muted-foreground\">{authDescription}</p>\r\n      </div>\r\n\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\r\n          {Object.keys(defaultValues)\r\n            .filter((field) => field !== \"rememberMe\")\r\n            .map((field) => {\r\n              return (\r\n                <FormField\r\n                  key={field}\r\n                  control={form.control}\r\n                  name={field as Path<T>}\r\n                  render={({ field: formField }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"capitalize\">\r\n                        {formField.name}\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        {[\"password\", \"confirmPassword\"].includes(\r\n                          formField.name,\r\n                        ) ? (\r\n                          <div className=\"relative\">\r\n                            <InputField\r\n                              // Set type based on whether the field should be visible or hidden.\r\n                              type={\r\n                                showPasswords[formField.name]\r\n                                  ? \"text\"\r\n                                  : \"password\"\r\n                              }\r\n                              placeholder=\"********\"\r\n                              className={cn(\r\n                                \"bg-white/10 border-white/20 leading-none\",\r\n                                {\r\n                                  \"pt-2\": true,\r\n                                },\r\n                              )}\r\n                              {...formField}\r\n                              InputProps={{\r\n                                endAdornment: (\r\n                                  <button\r\n                                    type=\"button\"\r\n                                    onClick={() =>\r\n                                      setShowPasswords((prev) => ({\r\n                                        ...prev,\r\n                                        [formField.name]: !prev[formField.name],\r\n                                      }))\r\n                                    }\r\n                                  >\r\n                                    {showPasswords[formField.name] ? (\r\n                                      <Eye />\r\n                                    ) : (\r\n                                      <EyeClosed />\r\n                                    )}\r\n                                  </button>\r\n                                ),\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        ) : (\r\n                          <InputField\r\n                            type={formField.name === \"email\" ? \"email\" : \"text\"}\r\n                            placeholder={\r\n                              formField.name === \"email\"\r\n                                ? \"user@example.com\"\r\n                                : formField.name\r\n                            }\r\n                            className={cn(\r\n                              \"bg-white/10 border-white/2 leading-none\",\r\n                              {\r\n                                \"pt-2\": false,\r\n                              },\r\n                            )}\r\n                            {...formField}\r\n                          />\r\n                        )}\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              );\r\n            })}\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={loading}\r\n              className=\"w-full rounded-full capitalize\"\r\n            >\r\n              {getButtonText()}\r\n            </Button>\r\n          </div>\r\n\r\n          {providers && providers.length > 0 && (\r\n            <>\r\n              <div className=\"relative my-6\">\r\n                <div className=\"absolute inset-0 flex items-center\">\r\n                  <div className=\"w-full border-t\" />\r\n                </div>\r\n                <div className=\"relative flex justify-center text-xs uppercase\">\r\n                  <span className=\"bg-background px-2 text-muted-foreground\">\r\n                    Or continue with\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                {providers.map((provider) => (\r\n                  <Button\r\n                    key={provider}\r\n                    variant=\"outline\"\r\n                    type=\"button\"\r\n                    disabled={loading}\r\n                    className=\"w-full\"\r\n                  >\r\n                    {provider}\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          {/* Forgot Password Link for Sign In Page */}\r\n          {isSignIn && (\r\n            <div className=\"text-center mt-2\">\r\n              <Link\r\n                href=\"/get-token\"\r\n                className=\"text-secondary-500 hover:underline text-sm\"\r\n              >\r\n                Forgot Password?\r\n              </Link>\r\n            </div>\r\n          )}\r\n\r\n          {isSignUp && (\r\n            <div className=\"text-[9px] font-normal text-muted-foreground text-center\">\r\n              By Creating an Account, it means you agree to our Privacy Policy\r\n              and Terms of Service\r\n            </div>\r\n          )}\r\n          <div className=\"text-center text-sm\">\r\n            {(() => {\r\n              if (isSignIn) return \"Don't have an account?\";\r\n              if (!isResetPassword) return \"Already have an account?\";\r\n              return \"\";\r\n            })()}{\" \"}\r\n            {!isResetPassword ? (\r\n              <Link\r\n                href={isSignIn ? \"sign-up\" : \"/sign-in\"}\r\n                className=\"text-secondary-500 hover:text-secondary-500/90\"\r\n              >\r\n                {isSignIn ? \"Sign Up\" : \"Sign In\"}\r\n              </Link>\r\n            ) : null}\r\n          </div>\r\n        </form>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { AuthForm };\r\n",
      "path": "ui/auth-form.tsx",
      "target": "components/ui/auth-form.tsx"
    },
    {
      "type": "registry:ui",
      "content": "import React from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { VariantProps, cva } from \"class-variance-authority\";\r\n\r\n// Define input variants using class-variance-authority\r\nconst inputFieldVariants = cva(\r\n  [\r\n    \"flex h-10 w-full rounded-sm bg-background px-3 py-2 text-sm ring-offset-background\",\r\n    \"file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground\",\r\n    \"placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2\",\r\n    \"disabled:cursor-not-allowed disabled:opacity-50\",\r\n  ],\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"border border-input\",\r\n        outline: \"border border-input bg-transparent\",\r\n        ghost: \"border-none bg-transparent shadow-none\",\r\n        \"outline-bottom\": \"border-b border-input bg-transparent\",\r\n      },\r\n      inputSize: {\r\n        default: \"h-10 px-3 py-2\",\r\n        sm: \"h-8 px-2 py-1 text-xs\",\r\n        lg: \"h-12 px-4 py-3 text-base\",\r\n      },\r\n      state: {\r\n        default: \"focus-visible:ring-ring\",\r\n        error: \"border-destructive focus-visible:ring-destructive\",\r\n        success: \"border-success focus-visible:ring-success\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      inputSize: \"default\",\r\n      state: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface SimpleInputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement>,\r\n    VariantProps<typeof inputFieldVariants> {\r\n  /** Additional className for the input wrapper */\r\n  wrapperClassName?: string;\r\n  /** Additional className for the input element */\r\n  inputClassName?: string;\r\n  /** Label text */\r\n  label?: string;\r\n  /** Helper or error text shown below the input */\r\n  helperText?: string;\r\n  /** Whether the input is in an error state */\r\n  error?: boolean;\r\n  /** Whether the input is in a success state */\r\n  success?: boolean;\r\n  /** Props for input decorations */\r\n  InputProps?: {\r\n    /** Element to show before the input */\r\n    startAdornment?: React.ReactNode;\r\n    /** Element to show after the input */\r\n    endAdornment?: React.ReactNode;\r\n    /** Custom styles for the input element */\r\n    style?: React.CSSProperties;\r\n  };\r\n}\r\n\r\nconst InputField = React.forwardRef<HTMLInputElement, SimpleInputProps>(\r\n  (\r\n    {\r\n      wrapperClassName,\r\n      inputClassName,\r\n      type = \"text\",\r\n      label,\r\n      helperText,\r\n      error,\r\n      success,\r\n      variant,\r\n      inputSize,\r\n      InputProps,\r\n      required,\r\n      disabled,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    // Determine the input state\r\n    const inputState = error ? \"error\" : success ? \"success\" : \"default\";\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          \"flex flex-col w-full space-y-1.5\",\r\n          disabled && \"opacity-50\",\r\n          wrapperClassName\r\n        )}\r\n      >\r\n        {label && (\r\n          <label\r\n            className={cn(\r\n              \"text-sm font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\r\n              error && \"text-destructive\"\r\n            )}\r\n          >\r\n            {label}\r\n            {required && <span className=\"text-destructive ml-1\">*</span>}\r\n          </label>\r\n        )}\r\n        <div className=\"relative\">\r\n          {InputProps?.startAdornment && (\r\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\r\n              {InputProps.startAdornment}\r\n            </div>\r\n          )}\r\n          <input\r\n            type={type}\r\n            className={cn(\r\n              inputFieldVariants({ variant, inputSize, state: inputState }),\r\n              InputProps?.startAdornment && \"pl-10\",\r\n              InputProps?.endAdornment && \"pr-10\",\r\n              inputClassName\r\n            )}\r\n            ref={ref}\r\n            aria-invalid={error}\r\n            aria-describedby={\r\n              helperText ? `${props.id}-description` : undefined\r\n            }\r\n            disabled={disabled}\r\n            required={required}\r\n            {...props}\r\n            style={InputProps?.style}\r\n          />\r\n          {InputProps?.endAdornment && (\r\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\r\n              {InputProps.endAdornment}\r\n            </div>\r\n          )}\r\n        </div>\r\n        {helperText && (\r\n          <p\r\n            id={`${props.id}-description`}\r\n            className={cn(\r\n              \"text-xs\",\r\n              error\r\n                ? \"text-destructive\"\r\n                : success\r\n                ? \"text-success\"\r\n                : \"text-muted-foreground\"\r\n            )}\r\n          >\r\n            {helperText}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nInputField.displayName = \"InputField\";\r\n\r\nexport default InputField;\r\n",
      "path": "ui/input-field.tsx",
      "target": "components/ui/input-field.tsx"
    }
  ]
}