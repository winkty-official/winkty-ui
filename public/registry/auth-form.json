{
  "name": "auth-form",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "form",
    "utils"
  ],
  "dependencies": [
    "zod",
    "react-hook-form",
    "lucide-react",
    "@hookform/resolvers"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { cn } from \"@/lib/utils\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Eye, EyeClosed } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { useState } from \"react\";\nimport {\n  DefaultValues,\n  FieldValues,\n  Path,\n  SubmitHandler,\n  useForm,\n  UseFormReturn,\n} from \"react-hook-form\";\nimport { ZodType } from \"zod\";\nimport InputField from \"./input-field\";\n\ninterface AuthFormProps<T extends FieldValues> {\n  type: \"SIGN_IN\" | \"SIGN_UP\" | \"FORGOT_PASSWORD\" | \"RESET_PASSWORD\";\n  onSubmit: (data: T) => void;\n  schema: ZodType<T>;\n  defaultValues: T;\n  authTitle?: string;\n  authDescription?: string;\n  loading?: boolean;\n  providers?: string[];\n}\n\nconst AuthForm = <T extends FieldValues>({\n  type,\n  defaultValues,\n  onSubmit,\n  schema,\n  authTitle,\n  authDescription,\n  loading,\n  providers,\n}: AuthFormProps<T>) => {\n  const isSignIn = type === \"SIGN_IN\";\n  const isForgotPassword = type === \"FORGOT_PASSWORD\";\n  const isSignUp = type === \"SIGN_UP\";\n  const isResetPassword = type === \"RESET_PASSWORD\";\n\n  const form: UseFormReturn<T> = useForm({\n    resolver: zodResolver(schema),\n    defaultValues: defaultValues as DefaultValues<T>,\n  });\n\n  // State to track whether to show password fields as plain text.\n  const [showPasswords, setShowPasswords] = useState<{\n    [key: string]: boolean;\n  }>({\n    password: false,\n    confirmPassword: false,\n  });\n\n  const handleSubmit: SubmitHandler<T> = async (data) => {\n    console.log(\"ðŸš€ ~ handleSubmit ~ data:\", data);\n    try {\n      if (!data) return;\n      await onSubmit(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getButtonText = () => {\n    if (isSignIn) return \"Sign In\";\n    if (isSignUp) return \"Sign Up\";\n    if (isForgotPassword) return \"Send Reset Link\";\n    if (isResetPassword) return \"Reset Password\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-2 text-center\">\n        <h2 className=\"font-semibold tracking-tight\">{authTitle}</h2>\n        <p className=\"text-sm text-muted-foreground\">{authDescription}</p>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          {Object.keys(defaultValues)\n            .filter((field) => field !== \"rememberMe\")\n            .map((field) => {\n              return (\n                <FormField\n                  key={field}\n                  control={form.control}\n                  name={field as Path<T>}\n                  render={({ field: formField }) => (\n                    <FormItem>\n                      <FormLabel className=\"capitalize\">\n                        {formField.name}\n                      </FormLabel>\n                      <FormControl>\n                        {[\"password\", \"confirmPassword\"].includes(\n                          formField.name,\n                        ) ? (\n                          <div className=\"relative\">\n                            <InputField\n                              // Set type based on whether the field should be visible or hidden.\n                              type={\n                                showPasswords[formField.name]\n                                  ? \"text\"\n                                  : \"password\"\n                              }\n                              placeholder=\"********\"\n                              className={cn(\" leading-none\", {\n                                \"pt-2\": true,\n                              })}\n                              {...formField}\n                              InputProps={{\n                                endAdornment: (\n                                  <button\n                                    type=\"button\"\n                                    onClick={() =>\n                                      setShowPasswords((prev) => ({\n                                        ...prev,\n                                        [formField.name]: !prev[formField.name],\n                                      }))\n                                    }\n                                  >\n                                    {showPasswords[formField.name] ? (\n                                      <Eye />\n                                    ) : (\n                                      <EyeClosed />\n                                    )}\n                                  </button>\n                                ),\n                              }}\n                            />\n                          </div>\n                        ) : (\n                          <InputField\n                            type={formField.name === \"email\" ? \"email\" : \"text\"}\n                            placeholder={\n                              formField.name === \"email\"\n                                ? \"user@example.com\"\n                                : formField.name\n                            }\n                            className={cn(\" leading-none\", {\n                              \"pt-2\": false,\n                            })}\n                            {...formField}\n                          />\n                        )}\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              );\n            })}\n\n          <div>\n            <Button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full rounded-full capitalize\"\n            >\n              {getButtonText()}\n            </Button>\n          </div>\n\n          {providers && providers.length > 0 && (\n            <>\n              <div className=\"relative my-6\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-background px-2 text-muted-foreground\">\n                    Or continue with\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                {providers.map((provider) => (\n                  <Button\n                    key={provider}\n                    variant=\"outline\"\n                    type=\"button\"\n                    disabled={loading}\n                    className=\"w-full\"\n                  >\n                    {provider}\n                  </Button>\n                ))}\n              </div>\n            </>\n          )}\n\n          {/* Forgot Password Link for Sign In Page */}\n          {isSignIn && (\n            <div className=\"text-center mt-2\">\n              <Link\n                href=\"/get-token\"\n                className=\"text-secondary-500 hover:underline text-sm\"\n              >\n                Forgot Password?\n              </Link>\n            </div>\n          )}\n\n          {isSignUp && (\n            <div className=\"text-[9px] font-normal text-muted-foreground text-center\">\n              By Creating an Account, it means you agree to our Privacy Policy\n              and Terms of Service\n            </div>\n          )}\n          <div className=\"text-center text-sm\">\n            {(() => {\n              if (isSignIn) return \"Don't have an account?\";\n              if (!isResetPassword) return \"Already have an account?\";\n              return \"\";\n            })()}{\" \"}\n            {!isResetPassword ? (\n              <Link\n                href={isSignIn ? \"sign-up\" : \"/sign-in\"}\n                className=\"text-secondary-500 hover:text-secondary-500/90\"\n              >\n                {isSignIn ? \"Sign Up\" : \"Sign In\"}\n              </Link>\n            ) : null}\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n};\n\nexport { AuthForm };\n",
      "path": "ui/auth-form.tsx",
      "target": "components/ui/auth-form.tsx"
    },
    {
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { AlertCircle } from \"lucide-react\";\n\nconst inputFieldVariants = cva(\n  [\n    \"flex h-10 w-full rounded-sm bg-background px-3 py-2 text-sm ring-offset-background\",\n    \"file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground\",\n    \"placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 \",\n    \"disabled:cursor-not-allowed disabled:opacity-50 \",\n    \"[data-error='true'] \",\n  ],\n  {\n    variants: {\n      variant: {\n        default: \"border border-input\",\n        outline: \"border border-input bg-transparent\",\n        ghost: \"border-none bg-transparent shadow-none\",\n        \"outline-bottom\": \"border-b border-input bg-transparent\",\n      },\n      inputSize: {\n        default: \"h-10 px-3 py-2\",\n        sm: \"h-8 px-2 py-1 text-xs\",\n        lg: \"h-12 px-4 py-3 text-base\",\n      },\n      state: {\n        default: \"focus-visible:ring-ring\",\n        error: \"border-destructive focus-visible:ring-destructive\",\n        success: \"border-success focus-visible:ring-success\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      inputSize: \"default\",\n      state: \"default\",\n    },\n  }\n);\n\nexport interface InputFieldProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    VariantProps<typeof inputFieldVariants> {\n  wrapperClassName?: string;\n  label?: string;\n  helperText?: string;\n  error?: boolean;\n  success?: boolean;\n  InputProps?: {\n    startAdornment?: React.ReactNode;\n    endAdornment?: React.ReactNode;\n    style?: React.CSSProperties;\n  };\n}\n\nconst InputField = React.forwardRef<HTMLInputElement, InputFieldProps>(\n  (\n    {\n      wrapperClassName,\n      type = \"text\",\n      label,\n      helperText,\n      error,\n      success,\n      variant,\n      inputSize,\n      InputProps,\n      required,\n      disabled,\n      ...props\n    },\n    ref\n  ) => {\n    const inputState = error ? \"error\" : success ? \"success\" : \"default\";\n\n    return (\n      <div\n        className={cn(\n          \"flex flex-col w-full space-y-1.5\",\n          disabled && \"opacity-50\",\n          wrapperClassName\n        )}\n        data-error={error}\n        data-success={success}\n        data-disabled={disabled}\n      >\n        {label && (\n          <label\n            className={cn(\n              \"text-sm font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n              error && \"text-destructive\"\n            )}\n          >\n            {label}\n            {required && <span className=\"text-destructive ml-1\">*</span>}\n          </label>\n        )}\n        <div className=\"relative\">\n          {InputProps?.startAdornment && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n              {InputProps.startAdornment}\n            </div>\n          )}\n          <input\n            {...props}\n            type={type}\n            className={cn(\n              inputFieldVariants({ variant, inputSize, state: inputState }),\n              InputProps?.startAdornment && \"pl-10\",\n              InputProps?.endAdornment && \"pr-10\",\n              props?.className\n            )}\n            ref={ref}\n            aria-invalid={error}\n            aria-describedby={\n              helperText ? `${props.id}-description` : undefined\n            }\n            disabled={disabled}\n            required={required}\n            style={InputProps?.style}\n          />\n          {InputProps?.endAdornment && (\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n              {InputProps.endAdornment}\n            </div>\n          )}\n          {error && !InputProps?.endAdornment && (\n            <AlertCircle className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 text-destructive\" />\n          )}\n        </div>\n        {helperText && (\n          <p\n            id={`${props.id}-description`}\n            className={cn(\n              \"text-xs\",\n              error\n                ? \"text-destructive\"\n                : success\n                ? \"text-success\"\n                : \"text-muted-foreground\"\n            )}\n          >\n            {helperText}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nInputField.displayName = \"InputField\";\n\nexport default InputField;\n",
      "path": "ui/input-field.tsx",
      "target": "components/ui/input-field.tsx"
    }
  ]
}