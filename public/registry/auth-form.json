{
  "name": "auth-form",
  "type": "registry:ui",
  "dependencies": [
    "react-hook-form",
    "@hookform/resolvers",
    "zod",
    "lucide-react",
    "@radix-ui/react-label",
    "@radix-ui/react-slot"
  ],
  "devDependencies": [],
  "files": [
    {
      "name": "auth-form.tsx",
      "type": "registry:ui",
      "path": "components/ui/auth-form.tsx",
      "target": "components/ui/auth-form.tsx",
      "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { AuthCard } from \"./auth-card\";\nimport { useState } from \"react\";\n\ninterface AuthFormData {\n  email: string;\n  password?: string;\n}\n\ninterface AuthFormProps {\n  variant: \"signin\" | \"signup\" | \"forgot-password\";\n  onSubmit: (data: AuthFormData) => void;\n  onSuccess?: (response: unknown) => void;\n  providers?: string[];\n}\n\nexport function AuthForm({ variant, onSubmit, onSuccess, providers }: AuthFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentView, setCurrentView] = useState(variant);\n\n  const form = useForm<AuthFormData>({\n    resolver: zodResolver(\n      z.object({\n        email: z.string().email(),\n        ...(currentView !== \"forgot-password\" ? { password: z.string().min(8) } : {}),\n      })\n    ),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const handleSubmit = async (data: AuthFormData) => {\n    try {\n      setIsLoading(true);\n      await onSubmit(data);\n      onSuccess?.(data);\n    } catch (error) {\n      console.error(\"Auth error:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <AuthCard\n      title={currentView === \"signin\" ? \"Sign in\" : currentView === \"signup\" ? \"Sign up\" : \"Reset password\"}\n      description={currentView === \"forgot-password\" ? \"Enter your email to reset your password\" : \"Enter your credentials below\"}\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"m@example.com\" type=\"email\" disabled={isLoading} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {currentView !== \"forgot-password\" && (\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input type=\"password\" disabled={isLoading} {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          )}\n\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? \"Loading...\" : currentView === \"signin\" ? \"Sign in\" : currentView === \"signup\" ? \"Sign up\" : \"Reset password\"}\n          </Button>\n        </form>\n      </Form>\n\n      {providers?.length > 0 && (\n        <div className=\"relative my-6\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <div className=\"w-full border-t\" />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n          </div>\n          <div className=\"mt-6 grid grid-cols-2 gap-4\">\n            {providers.map((provider) => (\n              <Button key={provider} variant=\"outline\" className=\"w-full\">{provider}</Button>\n            ))}\n          </div>\n        </div>\n      )}\n    </AuthCard>\n  );\n}"
    },
    {
      "name": "auth-card.tsx",
      "type": "registry:ui",
      "path": "components/ui/auth-card.tsx",
      "target": "components/ui/auth-card.tsx",
      "content": "import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface AuthCardProps {\n  title: string;\n  description?: string;\n  children: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\nexport function AuthCard({ title, description, children, footer }: AuthCardProps) {\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n        {description && <CardDescription>{description}</CardDescription>}\n      </CardHeader>\n      <CardContent>{children}</CardContent>\n      {footer && <CardFooter>{footer}</CardFooter>}\n    </Card>\n  );\n}"
    }
  ],
  "styles": [
    {
      "name": "auth-form.css",
      "type": "registry:style",
      "target": "styles/auth-form.css",
      "content": ".auth-form {\n  @apply space-y-4;\n}\n\n.auth-form-divider {\n  @apply relative my-6;\n}\n\n.auth-form-divider::before {\n  @apply content-[\"\"] absolute w-full h-px bg-border top-1/2;\n}\n\n.auth-form-divider-text {\n  @apply relative z-10 bg-background px-2 text-sm text-muted-foreground;\n}"
    }
  ],
  "author": "Your Name <your.email@example.com>",
  "title": "Auth Form"
}
