{
  "name": "auto-complete",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "popover",
    "command",
    "badge"
  ],
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport { useState, useCallback, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport type Option = {\n  value: string;\n  label: string;\n  [key: string]: unknown; // Allow additional properties\n};\n\ntype SingleSelectProps = {\n  multiSelect?: false;\n  value?: Option | null;\n  onChange?: (value: Option | null) => void;\n};\n\ntype MultiSelectProps = {\n  multiSelect: true;\n  value?: Option[] | null;\n  onChange?: (value: Option[] | null) => void;\n};\n\ntype CommonProps = {\n  options?: Option[];\n  loadOptions?: (inputValue: string) => Promise<Option[]>;\n  placeholder?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  error?: string;\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n  clearable?: boolean;\n  renderOption?: (option: Option) => React.ReactNode;\n  filterOption?: (option: Option, inputValue: string) => boolean;\n  name?: string;\n  onBlur?: () => void;\n};\n\ntype AutocompleteProps = CommonProps & (SingleSelectProps | MultiSelectProps);\n\nexport default function Autocomplete({\n  options: initialOptions = [],\n  value,\n  onChange,\n  loadOptions,\n  placeholder = \"Select...\",\n  disabled = false,\n  loading: externalLoading = false,\n  error,\n  className,\n  size = \"md\",\n  clearable = true,\n  renderOption,\n  filterOption,\n  name,\n  multiSelect = false,\n}: AutocompleteProps) {\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState<Option[]>(initialOptions);\n  const [query, setQuery] = useState(\"\");\n  const [internalLoading, setInternalLoading] = useState(false);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const loading = externalLoading || internalLoading;\n\n  useEffect(() => {\n    if (!loadOptions) {\n      setOptions(initialOptions);\n    }\n  }, [initialOptions, loadOptions]);\n\n  const debouncedLoadOptions = useCallback(\n    async (inputValue: string) => {\n      if (loadOptions) {\n        setInternalLoading(true);\n        const newOptions = await loadOptions(inputValue);\n        setOptions(newOptions);\n        setInternalLoading(false);\n      }\n    },\n    [loadOptions]\n  );\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      debouncedLoadOptions(query);\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [query, debouncedLoadOptions]);\n\n  const filteredOptions = filterOption\n    ? options.filter((option) => filterOption(option, query))\n    : options.filter((option) =>\n        option.label.toLowerCase().includes(query.toLowerCase())\n      );\n\n  const handleSelect = useCallback(\n    (option: Option) => {\n      if (multiSelect) {\n        const newValue = Array.isArray(value) ? [...value] : [];\n        const optionIndex = newValue.findIndex(\n          (item) => item.value === option.value\n        );\n        if (optionIndex > -1) {\n          newValue.splice(optionIndex, 1);\n        } else {\n          newValue.push(option);\n        }\n        onChange?.(newValue as Option & Option[]);\n      } else {\n        setOpen(false);\n        onChange?.(option as Option & Option[]);\n      }\n    },\n    [multiSelect, value, onChange]\n  );\n\n  const handleClear = useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation();\n      if (multiSelect) {\n        onChange?.(null as unknown as Option & Option[]);\n      } else {\n        onChange?.(null as unknown as Option & Option[]);\n      }\n    },\n    [onChange, multiSelect]\n  );\n\n  const handleRemoveOption = useCallback(\n    (optionToRemove: Option) => {\n      if (multiSelect && Array.isArray(value)) {\n        const newValue = value.filter(\n          (option) => option.value !== optionToRemove.value\n        );\n        onChange?.(newValue as Option & Option[]);\n      }\n    },\n    [multiSelect, value, onChange]\n  );\n\n  const renderValue = () => {\n    if (multiSelect && Array.isArray(value)) {\n      return (\n        <div className=\"flex flex-wrap gap-1\">\n          {value.map((option) => (\n            <Badge\n              key={option.value}\n              variant=\"secondary\"\n              className=\"mr-1 group-hover:border group-hover:border-primary\"\n            >\n              {option.label}\n              <div\n                role=\"button\"\n                tabIndex={0}\n                className=\"ml-1 rounded-full  outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-blue-50 focus:ring-blue-600\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleRemoveOption(option);\n                }}\n              >\n                <X className=\"h-3 w-3 hover:text-primary\" />\n              </div>\n            </Badge>\n          ))}\n        </div>\n      );\n    }\n    return value ? (\n      <div className=\"flex items-center gap-2\">\n        {renderOption ? renderOption(value as Option) : (value as Option).label}\n      </div>\n    ) : (\n      placeholder\n    );\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild className=\"h-auto\">\n          <Button\n            ref={buttonRef}\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className={cn(\n              \"w-full justify-between  group\",\n              size === \"sm\" && \"h-auto text-sm\",\n              size === \"lg\" && \"h-auto\",\n              error && \"border-destructive\",\n              className\n            )}\n            disabled={disabled}\n            onClick={() => setOpen((prev) => !prev)}\n          >\n            <div className=\"flex flex-wrap items-center gap-1 overflow-hidden \">\n              {renderValue()}\n            </div>\n            <div className=\"flex items-center\">\n              {clearable && value && (\n                <div\n                  role=\"button\"\n                  tabIndex={0}\n                  className=\"mr-2 h-4 w-4 shrink-0 opacity-50 hover:opacity-100 focus:outline-none\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleClear(e);\n                  }}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" || e.key === \" \") {\n                      e.stopPropagation();\n                      handleClear(\n                        e as unknown as React.MouseEvent<Element, MouseEvent>\n                      );\n                    }\n                  }}\n                >\n                  <X />\n                </div>\n              )}\n\n              <ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\n            </div>\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n          <Command>\n            <CommandInput\n              placeholder={placeholder}\n              value={query}\n              onValueChange={setQuery}\n            />\n            <CommandList>\n              <CommandEmpty>No results found.</CommandEmpty>\n              <CommandGroup className=\"max-h-60 overflow-auto\">\n                <AnimatePresence mode=\"wait\">\n                  {loading ? (\n                    <motion.div\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                      className=\"p-4 text-center text-sm text-muted-foreground\"\n                    >\n                      Loading...\n                    </motion.div>\n                  ) : (\n                    filteredOptions.map((option) => (\n                      <CommandItem\n                        key={option.value}\n                        value={option.label}\n                        onSelect={() => handleSelect(option)}\n                        className=\"flex items-center justify-between\"\n                      >\n                        {renderOption ? renderOption(option) : option.label}\n                        <Check\n                          className={cn(\n                            \"ml-2 h-4 w-4\",\n                            multiSelect && Array.isArray(value)\n                              ? value.some(\n                                  (item) => item.value === option.value\n                                )\n                                ? \"opacity-100\"\n                                : \"opacity-0\"\n                              : (value as Option)?.value === option.value\n                              ? \"opacity-100\"\n                              : \"opacity-0\"\n                          )}\n                        />\n                      </CommandItem>\n                    ))\n                  )}\n                </AnimatePresence>\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n      {error && (\n        <motion.p\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-sm text-destructive\"\n        >\n          {error}\n        </motion.p>\n      )}\n      {name && (\n        <input\n          type=\"hidden\"\n          name={name}\n          value={\n            multiSelect ? JSON.stringify(value) : (value as Option)?.value || \"\"\n          }\n        />\n      )}\n    </div>\n  );\n}\n",
      "path": "ui/auto-complete.tsx",
      "target": "components/ui/auto-complete.tsx"
    }
  ]
}