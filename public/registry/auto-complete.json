{
  "name": "auto-complete",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "popover",
    "command",
    "badge"
  ],
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport type React from \"react\";\r\nimport { useState, useCallback, useRef, useEffect } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/components/ui/command\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\n\r\nexport type Option = {\r\n  value: string;\r\n  label: string;\r\n  [key: string]: unknown; // Allow additional properties\r\n};\r\n\r\ntype SingleSelectProps = {\r\n  multiSelect?: false;\r\n  value?: Option | null;\r\n  onChange?: (value: Option | null) => void;\r\n};\r\n\r\ntype MultiSelectProps = {\r\n  multiSelect: true;\r\n  value?: Option[] | null;\r\n  onChange?: (value: Option[] | null) => void;\r\n};\r\n\r\ntype CommonProps = {\r\n  options?: Option[];\r\n  loadOptions?: (inputValue: string) => Promise<Option[]>;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n  error?: string;\r\n  className?: string;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n  clearable?: boolean;\r\n  renderOption?: (option: Option) => React.ReactNode;\r\n  filterOption?: (option: Option, inputValue: string) => boolean;\r\n  name?: string;\r\n  onBlur?: () => void;\r\n  any?: boolean;\r\n};\r\n\r\ntype AutocompleteProps = CommonProps & (SingleSelectProps | MultiSelectProps);\r\n\r\nexport default function Autocomplete({\r\n  options: initialOptions = [],\r\n  value,\r\n  onChange,\r\n  loadOptions,\r\n  placeholder = \"Select...\",\r\n  disabled = false,\r\n  loading: externalLoading = false,\r\n  error,\r\n  className,\r\n  size = \"md\",\r\n  clearable = true,\r\n  renderOption,\r\n  filterOption,\r\n  name,\r\n  multiSelect = false,\r\n  any = false, // Default to false to maintain backward compatibility\r\n}: AutocompleteProps) {\r\n  const [open, setOpen] = useState(false);\r\n  const [options, setOptions] = useState<Option[]>(initialOptions);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [internalLoading, setInternalLoading] = useState(false);\r\n  const buttonRef = useRef<HTMLButtonElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const loading = externalLoading || internalLoading;\r\n\r\n  useEffect(() => {\r\n    if (!loadOptions) {\r\n      setOptions(initialOptions);\r\n    }\r\n  }, [initialOptions, loadOptions]);\r\n\r\n  const debouncedLoadOptions = useCallback(\r\n    async (inputValue: string) => {\r\n      if (loadOptions) {\r\n        setInternalLoading(true);\r\n        const newOptions = await loadOptions(inputValue);\r\n        setOptions(newOptions);\r\n        setInternalLoading(false);\r\n      }\r\n    },\r\n    [loadOptions],\r\n  );\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      debouncedLoadOptions(query);\r\n    }, 300);\r\n    return () => clearTimeout(timer);\r\n  }, [query, debouncedLoadOptions]);\r\n\r\n  const filteredOptions = filterOption\r\n    ? options.filter((option) => filterOption(option, query))\r\n    : options.filter((option) =>\r\n        option.label.toLowerCase().includes(query.toLowerCase()),\r\n      );\r\n\r\n  const handleCustomValue = useCallback(() => {\r\n    if (!query.trim()) return;\r\n\r\n    const customOption: Option = {\r\n      value: query.trim(),\r\n      label: query.trim(),\r\n    };\r\n\r\n    if (multiSelect) {\r\n      const newValueSet = new Set(\r\n        (Array.isArray(value) ? value : []).map((v) => v.value),\r\n      );\r\n\r\n      if (!newValueSet.has(customOption.value)) {\r\n        const newValue = [...(Array.isArray(value) ? value : []), customOption];\r\n        onChange?.(newValue as Option & Option[]);\r\n      }\r\n    } else {\r\n      onChange?.(customOption as Option & Option[]);\r\n      setOpen(false);\r\n    }\r\n\r\n    setQuery(\"\");\r\n  }, [query, multiSelect, value, onChange]);\r\n\r\n  const handleSelect = useCallback(\r\n    (option: Option) => {\r\n      if (multiSelect) {\r\n        const newValueSet = new Set(\r\n          (Array.isArray(value) ? value : []).map((v) => v.value),\r\n        );\r\n\r\n        if (newValueSet.has(option.value)) {\r\n          const newValue = (Array.isArray(value) ? value : []).filter(\r\n            (item) => item.value !== option.value,\r\n          );\r\n          onChange?.(newValue as Option & Option[]);\r\n        } else {\r\n          const newValue = [...(Array.isArray(value) ? value : []), option];\r\n          onChange?.(newValue as Option & Option[]);\r\n        }\r\n      } else {\r\n        setOpen(false);\r\n        onChange?.(option as Option & Option[]);\r\n      }\r\n      setQuery(\"\");\r\n    },\r\n    [multiSelect, value, onChange],\r\n  );\r\n\r\n  const handleClear = useCallback(\r\n    (e?: React.MouseEvent) => {\r\n      e?.stopPropagation();\r\n      onChange?.(null as unknown as Option & Option[]);\r\n      setQuery(\"\");\r\n    },\r\n    [onChange, multiSelect],\r\n  );\r\n\r\n  const handleKeyDown = useCallback(\r\n    (e: React.KeyboardEvent) => {\r\n      if (\r\n        e.key === \"Enter\" &&\r\n        any &&\r\n        filteredOptions.length === 0 &&\r\n        query.trim()\r\n      ) {\r\n        e.preventDefault();\r\n        handleCustomValue();\r\n      } else if (e.key === \"Backspace\" && query === \"\") {\r\n        if (multiSelect && Array.isArray(value) && value.length > 0) {\r\n          const newValue = value.slice(0, -1);\r\n          onChange?.(newValue as Option & Option[]);\r\n        } else if (!multiSelect) {\r\n          handleClear();\r\n        }\r\n      }\r\n    },\r\n    [any, filteredOptions.length, query, handleCustomValue, multiSelect, value, onChange, handleClear],\r\n  );\r\n\r\n  const handleRemoveOption = useCallback(\r\n    (optionToRemove: Option) => {\r\n      console.log(optionToRemove);\r\n      if (multiSelect && Array.isArray(value)) {\r\n        const newValue = value.filter(\r\n          (option) => option.value !== optionToRemove.value,\r\n        );\r\n        // if (newValue.length === 0) {\r\n        //   onChange?.(null as unknown as Option & Option[]);\r\n        // } else {\r\n        onChange?.(newValue as Option & Option[]);\r\n        // }\r\n      }\r\n    },\r\n    [multiSelect, value, onChange],\r\n  );\r\n\r\n  const renderValue = () => {\r\n    if (multiSelect && Array.isArray(value)) {\r\n      return value.length ? (\r\n        <div className=\"flex flex-wrap gap-1\">\r\n          {value.map((option) => (\r\n            <Badge\r\n              key={option.value}\r\n              variant=\"secondary\"\r\n              className=\"mr-1 group-hover:border group-hover:border-primary\"\r\n            >\r\n              {option.label}\r\n              <div\r\n                role=\"button\"\r\n                tabIndex={0}\r\n                className=\"ml-1 rounded-full outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-blue-50 focus:ring-blue-600\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  handleRemoveOption(option);\r\n                }}\r\n                onKeyDown={(e) => {\r\n                  if (e.key === \"Enter\" || e.key === \" \") {\r\n                    e.stopPropagation();\r\n                    handleRemoveOption(option);\r\n                  }\r\n                }}\r\n              >\r\n                <X className=\"h-3 w-3 hover:text-primary\" />\r\n              </div>\r\n            </Badge>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        placeholder\r\n      );\r\n    }\r\n    return value ? (\r\n      <div className=\"flex items-center gap-2\">\r\n        {renderOption ? renderOption(value as Option) : (value as Option).label}\r\n      </div>\r\n    ) : (\r\n      placeholder\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <Popover open={open} onOpenChange={setOpen}>\r\n        <PopoverTrigger asChild className=\"h-auto\">\r\n          <Button\r\n            ref={buttonRef}\r\n            variant=\"outline\"\r\n            role=\"combobox\"\r\n            aria-expanded={open}\r\n            className={cn(\r\n              \"w-full justify-between group\",\r\n              size === \"sm\" && \"h-auto text-sm\",\r\n              size === \"lg\" && \"h-auto\",\r\n              error && \"border-destructive\",\r\n              className,\r\n            )}\r\n            disabled={disabled}\r\n            onClick={() => setOpen((prev) => !prev)}\r\n          >\r\n            <div className=\"flex flex-wrap items-center gap-1 overflow-hidden\">\r\n              {renderValue()}\r\n            </div>\r\n            <div className=\"flex items-center\">\r\n              {clearable && value && (\r\n                <div\r\n                  role=\"button\"\r\n                  tabIndex={0}\r\n                  className=\"mr-2 h-4 w-4 shrink-0 opacity-50 hover:opacity-100 focus:outline-none\"\r\n                  onClick={handleClear}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === \"Enter\" || e.key === \" \") {\r\n                      e.preventDefault();\r\n                      handleClear(e as unknown as React.MouseEvent);\r\n                    }\r\n                  }}\r\n                >\r\n                  <X />\r\n                </div>\r\n              )}\r\n              <ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\r\n            </div>\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\r\n          <Command>\r\n            <CommandInput\r\n              ref={inputRef}\r\n              placeholder={placeholder}\r\n              value={query}\r\n              onValueChange={setQuery}\r\n              onKeyDown={handleKeyDown}\r\n            />\r\n            <CommandList>\r\n              <CommandEmpty>\r\n                {any ? (\r\n                  <div className=\"p-2 text-sm\">\r\n                    Press Enter to add &quot;{query}&quot; as a custom value\r\n                  </div>\r\n                ) : (\r\n                  \"No results found.\"\r\n                )}\r\n              </CommandEmpty>\r\n              <CommandGroup className=\"max-h-60 overflow-auto\">\r\n                <AnimatePresence mode=\"wait\">\r\n                  {loading ? (\r\n                    <motion.div\r\n                      initial={{ opacity: 0 }}\r\n                      animate={{ opacity: 1 }}\r\n                      exit={{ opacity: 0 }}\r\n                      className=\"p-4 text-center text-sm text-muted-foreground\"\r\n                    >\r\n                      Loading...\r\n                    </motion.div>\r\n                  ) : (\r\n                    filteredOptions.map((option) => (\r\n                      <CommandItem\r\n                        key={option.value}\r\n                        value={option.label}\r\n                        onSelect={() => handleSelect(option)}\r\n                        className=\"flex items-center justify-between\"\r\n                      >\r\n                        {renderOption ? renderOption(option) : option.label}\r\n                        <Check\r\n                          className={cn(\r\n                            \"ml-2 h-4 w-4\",\r\n                            multiSelect && Array.isArray(value)\r\n                              ? value.some(\r\n                                  (item) => item.value === option.value,\r\n                                )\r\n                                ? \"opacity-100\"\r\n                                : \"opacity-0\"\r\n                              : (value as Option)?.value === option.value\r\n                                ? \"opacity-100\"\r\n                                : \"opacity-0\",\r\n                          )}\r\n                        />\r\n                      </CommandItem>\r\n                    ))\r\n                  )}\r\n                </AnimatePresence>\r\n              </CommandGroup>\r\n            </CommandList>\r\n          </Command>\r\n        </PopoverContent>\r\n      </Popover>\r\n      {error && (\r\n        <motion.p\r\n          initial={{ opacity: 0, y: -10 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          className=\"text-sm text-destructive\"\r\n        >\r\n          {error}\r\n        </motion.p>\r\n      )}\r\n      {name && (\r\n        <input\r\n          type=\"hidden\"\r\n          name={name}\r\n          value={\r\n            multiSelect ? JSON.stringify(value) : (value as Option)?.value || \"\"\r\n          }\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "ui/auto-complete.tsx",
      "target": "components/ui/auto-complete.tsx"
    }
  ]
}