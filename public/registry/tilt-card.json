{
  "name": "tilt-card",
  "type": "registry:ui",
  "registryDependencies": [
    "utils"
  ],
  "dependencies": [
    "framer-motion",
    "react-intersection-observer"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { motion, useMotionValue, useSpring, useTransform } from \"framer-motion\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// Define prop types\r\ninterface TiltCardProps {\r\n  /** Additional classes to apply to the outer container */\r\n  className?: string;\r\n  /** Gradient background class (Tailwind format) */\r\n  gradient?: string;\r\n  /** Animation delay in seconds */\r\n  delay?: number;\r\n  /** Disables interactions and animations */\r\n  disabled?: boolean;\r\n  /** Custom ARIA label for accessibility */\r\n  ariaLabel?: string;\r\n  /** Custom content to render inside the card */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * A floating  card component with 3D hover effects and smooth animations.\r\n * This component provides a flexible container for custom content while maintaining\r\n * an engaging floating effect and accessibility features.\r\n *\r\n * @component\r\n * @example\r\n * Basic usage with custom content:\r\n * ```tsx\r\n * import { TiltCard } from \"@/components/ui/floating-feature\";\r\n * import { Zap } from \"lucide-react\";\r\n *\r\n * <TiltCard\r\n *   title=\"Fast Performance\"\r\n *   gradient=\"from-blue-500/20 to-transparent\"\r\n * >\r\n *   <div className=\"flex items-center gap-2\">\r\n *     <Zap className=\"h-6 w-6 text-blue-500\" />\r\n *     <div>\r\n *       <h3 className=\"text-lg font-semibold\">Fast Performance</h3>\r\n *       <p className=\"text-sm text-muted-foreground\">\r\n *         Lightning fast load times\r\n *       </p>\r\n *     </div>\r\n *   </div>\r\n * </TiltCard>\r\n * ```\r\n *\r\n * @example\r\n * Usage with multiple elements:\r\n * ```tsx\r\n * <TiltCard delay={0.2}>\r\n *   <div className=\"space-y-4\">\r\n *     <img src=\"/feature-icon.png\" alt=\"Feature\" className=\"h-8 w-8\" />\r\n *     <h3 className=\"text-xl font-bold\">Custom Feature</h3>\r\n *     <p>Some description here</p>\r\n *     <button className=\"btn\">Learn More</button>\r\n *   </div>\r\n * </TiltCard>\r\n * ```\r\n */\r\nconst TiltCard = React.forwardRef<\r\n  HTMLDivElement,\r\n  TiltCardProps\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      gradient = \"from-primary/20 via-primary/10 to-transparent\",\r\n      delay = 0,\r\n      disabled = false,\r\n      ariaLabel,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const [viewRef, inView] = useInView({\r\n      threshold: 0.2,\r\n      triggerOnce: true,\r\n    });\r\n\r\n    // Mouse position tracking\r\n    const mouseX = useMotionValue(0);\r\n    const mouseY = useMotionValue(0);\r\n\r\n    // Smooth rotation animations\r\n    const rotateX = useSpring(useTransform(mouseY, [-0.5, 0.5], [15, -15]), {\r\n      stiffness: 150,\r\n      damping: 20,\r\n    });\r\n    const rotateY = useSpring(useTransform(mouseX, [-0.5, 0.5], [-15, 15]), {\r\n      stiffness: 150,\r\n      damping: 20,\r\n    });\r\n\r\n    const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (disabled) return;\r\n      const rect = e.currentTarget.getBoundingClientRect();\r\n      const width = rect.width;\r\n      const height = rect.height;\r\n      const mouseXFromCenter = e.clientX - rect.left - width / 2;\r\n      const mouseYFromCenter = e.clientY - rect.top - height / 2;\r\n      mouseX.set(mouseXFromCenter / width);\r\n      mouseY.set(mouseYFromCenter / height);\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n      if (disabled) return;\r\n      mouseX.set(0);\r\n      mouseY.set(0);\r\n    };\r\n\r\n    return (\r\n      <motion.div\r\n        ref={(node) => {\r\n          viewRef(node);\r\n          if (typeof ref === \"function\") ref(node);\r\n          else if (ref) ref.current = node;\r\n        }}\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={inView ? { opacity: 1, y: 0 } : {}}\r\n        transition={{ duration: 0.6, delay }}\r\n        style={{ perspective: 1000 }}\r\n        className={cn(\"w-full max-w-sm\", className)}\r\n        aria-label={ariaLabel ?? `${Date.now()} feature card`}\r\n        {...props}\r\n      >\r\n        <motion.div\r\n          className={cn(\r\n            \"relative overflow-hidden rounded-xl border bg-card p-8\",\r\n            \"transition-colors hover:border-primary/50\",\r\n            \"before:absolute before:inset-0\",\r\n            `before:bg-gradient-to-b before:${gradient}`,\r\n            disabled && \"opacity-50 pointer-events-none\"\r\n          )}\r\n          style={{\r\n            rotateX: disabled ? 0 : rotateX,\r\n            rotateY: disabled ? 0 : rotateY,\r\n            transformStyle: \"preserve-3d\",\r\n          }}\r\n          onMouseMove={handleMouseMove}\r\n          onMouseLeave={handleMouseLeave}\r\n          animate={\r\n            !disabled && {\r\n              // y: [0, -12, 0],\r\n              transition: {\r\n                duration: 4,\r\n                repeat: Infinity,\r\n                repeatType: \"mirror\",\r\n                ease: \"easeInOut\",\r\n              },\r\n            }\r\n          }\r\n          aria-disabled={disabled}\r\n        >\r\n          <motion.div\r\n            className=\"relative z-10 flex flex-col items-start gap-4 \"\r\n          >\r\n            {children}\r\n          </motion.div>\r\n        </motion.div>\r\n      </motion.div>\r\n    );\r\n  }\r\n);\r\n\r\nTiltCard.displayName = \"TiltCard\";\r\n\r\nexport default TiltCard;",
      "path": "ui/tilt-card.tsx",
      "target": "components/ui/tilt-card.tsx"
    }
  ]
}