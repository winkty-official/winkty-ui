{
  "name": "tilt-card",
  "type": "registry:ui",
  "registryDependencies": [
    "utils"
  ],
  "dependencies": [
    "framer-motion",
    "react-intersection-observer"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion, useMotionValue, useSpring, useTransform } from \"framer-motion\";\nimport { useInView } from \"react-intersection-observer\";\nimport { cn } from \"@/lib/utils\";\n\n// Define prop types\ninterface TiltCardProps {\n  /** Additional classes to apply to the outer container */\n  className?: string;\n  /** Gradient background class (Tailwind format) */\n  gradient?: string;\n  /** Animation delay in seconds */\n  delay?: number;\n  /** Disables interactions and animations */\n  disabled?: boolean;\n  /** Custom ARIA label for accessibility */\n  ariaLabel?: string;\n  /** Custom content to render inside the card */\n  children: React.ReactNode;\n}\n\n/**\n * A floating  card component with 3D hover effects and smooth animations.\n * This component provides a flexible container for custom content while maintaining\n * an engaging floating effect and accessibility features.\n *\n * @component\n * @example\n * Basic usage with custom content:\n * ```tsx\n * import { TiltCard } from \"@/components/ui/floating-feature\";\n * import { Zap } from \"lucide-react\";\n *\n * <TiltCard\n *   title=\"Fast Performance\"\n *   gradient=\"from-blue-500/20 to-transparent\"\n * >\n *   <div className=\"flex items-center gap-2\">\n *     <Zap className=\"h-6 w-6 text-blue-500\" />\n *     <div>\n *       <h3 className=\"text-lg font-semibold\">Fast Performance</h3>\n *       <p className=\"text-sm text-muted-foreground\">\n *         Lightning fast load times\n *       </p>\n *     </div>\n *   </div>\n * </TiltCard>\n * ```\n *\n * @example\n * Usage with multiple elements:\n * ```tsx\n * <TiltCard delay={0.2}>\n *   <div className=\"space-y-4\">\n *     <img src=\"/feature-icon.png\" alt=\"Feature\" className=\"h-8 w-8\" />\n *     <h3 className=\"text-xl font-bold\">Custom Feature</h3>\n *     <p>Some description here</p>\n *     <button className=\"btn\">Learn More</button>\n *   </div>\n * </TiltCard>\n * ```\n */\nconst TiltCard = React.forwardRef<\n  HTMLDivElement,\n  TiltCardProps\n>(\n  (\n    {\n      className,\n      gradient = \"from-primary/20 via-primary/10 to-transparent\",\n      delay = 0,\n      disabled = false,\n      ariaLabel,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [viewRef, inView] = useInView({\n      threshold: 0.2,\n      triggerOnce: true,\n    });\n\n    // Mouse position tracking\n    const mouseX = useMotionValue(0);\n    const mouseY = useMotionValue(0);\n\n    // Smooth rotation animations\n    const rotateX = useSpring(useTransform(mouseY, [-0.5, 0.5], [15, -15]), {\n      stiffness: 150,\n      damping: 20,\n    });\n    const rotateY = useSpring(useTransform(mouseX, [-0.5, 0.5], [-15, 15]), {\n      stiffness: 150,\n      damping: 20,\n    });\n\n    const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n      if (disabled) return;\n      const rect = e.currentTarget.getBoundingClientRect();\n      const width = rect.width;\n      const height = rect.height;\n      const mouseXFromCenter = e.clientX - rect.left - width / 2;\n      const mouseYFromCenter = e.clientY - rect.top - height / 2;\n      mouseX.set(mouseXFromCenter / width);\n      mouseY.set(mouseYFromCenter / height);\n    };\n\n    const handleMouseLeave = () => {\n      if (disabled) return;\n      mouseX.set(0);\n      mouseY.set(0);\n    };\n\n    return (\n      <motion.div\n        ref={(node) => {\n          viewRef(node);\n          if (typeof ref === \"function\") ref(node);\n          else if (ref) ref.current = node;\n        }}\n        initial={{ opacity: 0, y: 20 }}\n        animate={inView ? { opacity: 1, y: 0 } : {}}\n        transition={{ duration: 0.6, delay }}\n        style={{ perspective: 1000 }}\n        className={cn(\"w-full max-w-sm\", className)}\n        aria-label={ariaLabel ?? `${Date.now()} feature card`}\n        {...props}\n      >\n        <motion.div\n          className={cn(\n            \"relative overflow-hidden rounded-xl border bg-card p-8\",\n            \"transition-colors hover:border-primary/50\",\n            \"before:absolute before:inset-0\",\n            `before:bg-gradient-to-b before:${gradient}`,\n            disabled && \"opacity-50 pointer-events-none\"\n          )}\n          style={{\n            rotateX: disabled ? 0 : rotateX,\n            rotateY: disabled ? 0 : rotateY,\n            transformStyle: \"preserve-3d\",\n          }}\n          onMouseMove={handleMouseMove}\n          onMouseLeave={handleMouseLeave}\n          animate={\n            !disabled && {\n              // y: [0, -12, 0],\n              transition: {\n                duration: 4,\n                repeat: Infinity,\n                repeatType: \"mirror\",\n                ease: \"easeInOut\",\n              },\n            }\n          }\n          aria-disabled={disabled}\n        >\n          <motion.div\n            className=\"relative z-10 flex flex-col items-start gap-4 \"\n          >\n            {children}\n          </motion.div>\n        </motion.div>\n      </motion.div>\n    );\n  }\n);\n\nTiltCard.displayName = \"TiltCard\";\n\nexport default TiltCard;",
      "path": "ui/tilt-card.tsx",
      "target": "components/ui/tilt-card.tsx"
    }
  ]
}