{
  "name": "chromatic-ripple-effect",
  "type": "registry:ui",
  "dependencies": ["framer-motion"],
  "files": [
    {
      "name": "chromatic-ripple-effect.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport { useState, useRef, useCallback } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface TextRippleEffectProps {\n  children?: React.ReactNode | string;\n  className?: string;\n  rippleColor?: string;\n  rippleSize?: number;\n  rippleDuration?: number;\n}\n\nexport const TextRippleEffect: React.FC<TextRippleEffectProps> = ({\n  children,\n  className = \"\",\n  rippleColor = \"#3b82f6\",\n  rippleSize = 100,\n  rippleDuration = 0.5,\n}) => {\n  const [ripples, setRipples] = useState<{ x: number; y: number; key: number }[]>([]);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const rippleCount = useRef(0);\n\n  const addRipple = useCallback(\n    (x: number, y: number) => {\n      const newRipple = { x, y, key: rippleCount.current };\n      setRipples((prevRipples) => [...prevRipples, newRipple]);\n      rippleCount.current += 1;\n\n      setTimeout(() => {\n        setRipples((prevRipples) =>\n          prevRipples.filter((r) => r.key !== newRipple.key)\n        );\n      }, rippleDuration * 1000);\n    },\n    [rippleDuration]\n  );\n\n  const handleMouseMove = useCallback(\n    (event: React.MouseEvent<HTMLDivElement>) => {\n      if (containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        addRipple(x, y);\n      }\n    },\n    [addRipple]\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={`relative inline-block overflow-hidden ${className}`}\n      onMouseMove={handleMouseMove}\n    >\n      {ripples.map((ripple) => (\n        <motion.div\n          key={ripple.key}\n          className=\"absolute rounded-full pointer-events-none\"\n          style={{\n            left: ripple.x - rippleSize / 2,\n            top: ripple.y - rippleSize / 2,\n            width: rippleSize,\n            height: rippleSize,\n            background: rippleColor,\n          }}\n          initial={{ scale: 0, opacity: 0.5 }}\n          animate={{ scale: 1, opacity: 0 }}\n          transition={{ duration: rippleDuration, ease: \"easeOut\" }}\n        />\n      ))}\n      <div className=\"relative z-10\">\n        {typeof children === \"string\"\n          ? children?.split(\"\").map((char, index) => (\n              <motion.span\n                key={index}\n                className=\"inline-block\"\n                initial={{ y: 0 }}\n                whileHover={{ y: -5 }}\n                transition={{ type: \"spring\", stiffness: 500, damping: 10 }}\n              >\n                {char}\n              </motion.span>\n            ))\n          : children}\n      </div>\n    </div>\n  );\n};",
      "dir": "components/fancy/chromatic-ripple-effect"
    }
  ],
  "styles": [
    {
      "name": "chromatic-ripple.css",
      "content": "@media (prefers-reduced-motion: reduce) {\n  .chromatic-ripple * {\n    animation: none !important;\n    transition: none !important;\n  }\n}",
      "dir": "styles/components"
    }
  ],
  "author": "Your Name <your.email@example.com>",
  "title": "Chromatic Ripple Effect",
  "description": "An interactive text component that creates smooth ripple animations on mouse movement.",
  "version": "1.0.0",
  "license": "MIT"
}
