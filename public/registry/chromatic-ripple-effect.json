{
  "name": "chromatic-ripple-effect",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport type React from \"react\";\r\nimport { useState, useRef, useCallback } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\ninterface TextRippleEffectProps {\r\n  children?: React.ReactNode | string;\r\n  className?: string;\r\n  rippleColor?: string;\r\n  rippleSize?: number;\r\n  rippleDuration?: number;\r\n}\r\n\r\ninterface MouseRippleEffectProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  rippleColor?: string;\r\n  rippleSize?: number;\r\n  rippleDuration?: number;\r\n}\r\n\r\ninterface TextHoverEffectProps {\r\n  children: string;\r\n  className?: string;\r\n}\r\n\r\nconst TextAndMouseRippleEffect: React.FC<TextRippleEffectProps> = ({\r\n  children,\r\n  className = \"\",\r\n  rippleColor = \"#3b82f6\",\r\n  rippleSize = 100,\r\n  rippleDuration = 0.5,\r\n}) => {\r\n  const [ripples, setRipples] = useState<\r\n    { x: number; y: number; key: number }[]\r\n  >([]);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const rippleCount = useRef(0);\r\n\r\n  const addRipple = useCallback(\r\n    (x: number, y: number) => {\r\n      const newRipple = { x, y, key: rippleCount.current };\r\n      setRipples((prevRipples) => [...prevRipples, newRipple]);\r\n      rippleCount.current += 1;\r\n\r\n      setTimeout(() => {\r\n        setRipples((prevRipples) =>\r\n          prevRipples.filter((r) => r.key !== newRipple.key),\r\n        );\r\n      }, rippleDuration * 1000);\r\n    },\r\n    [rippleDuration],\r\n  );\r\n\r\n  const handleMouseMove = useCallback(\r\n    (event: React.MouseEvent<HTMLDivElement>) => {\r\n      if (containerRef.current) {\r\n        const rect = containerRef.current.getBoundingClientRect();\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n        addRipple(x, y);\r\n      }\r\n    },\r\n    [addRipple],\r\n  );\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`relative inline-block overflow-hidden ${className}`}\r\n      onMouseMove={handleMouseMove}\r\n    >\r\n      {ripples.map((ripple) => (\r\n        <motion.div\r\n          key={ripple.key}\r\n          className=\"absolute rounded-full pointer-events-none\"\r\n          style={{\r\n            left: ripple.x - rippleSize / 2,\r\n            top: ripple.y - rippleSize / 2,\r\n            width: rippleSize,\r\n            height: rippleSize,\r\n            background: rippleColor,\r\n          }}\r\n          initial={{ scale: 0, opacity: 0.5 }}\r\n          animate={{ scale: 1, opacity: 0 }}\r\n          transition={{ duration: rippleDuration, ease: \"easeOut\" }}\r\n        />\r\n      ))}\r\n      <div className=\"relative z-10\">\r\n        {typeof children === \"string\"\r\n          ? children?.split(\"\").map((char, index) => (\r\n              <motion.span\r\n                key={index}\r\n                className=\"inline-block text-primary\"\r\n                initial={{ y: 0 }}\r\n                whileHover={{ y: -5 }}\r\n                transition={{ type: \"spring\", stiffness: 500, damping: 10 }}\r\n              >\r\n                {char === \" \" ? \"\\u00A0\" : char}\r\n              </motion.span>\r\n            ))\r\n          : children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MouseRippleEffect: React.FC<MouseRippleEffectProps> = ({\r\n  children,\r\n  className = \"\",\r\n  rippleColor = \"#3b82f6\",\r\n  rippleSize = 100,\r\n  rippleDuration = 0.5,\r\n}) => {\r\n  const [ripples, setRipples] = useState<\r\n    { x: number; y: number; key: number }[]\r\n  >([]);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const rippleCount = useRef(0);\r\n\r\n  const addRipple = useCallback(\r\n    (x: number, y: number) => {\r\n      const newRipple = { x, y, key: rippleCount.current };\r\n      setRipples((prevRipples) => [...prevRipples, newRipple]);\r\n      rippleCount.current += 1;\r\n\r\n      setTimeout(() => {\r\n        setRipples((prevRipples) =>\r\n          prevRipples.filter((r) => r.key !== newRipple.key),\r\n        );\r\n      }, rippleDuration * 1000);\r\n    },\r\n    [rippleDuration],\r\n  );\r\n\r\n  const handleMouseMove = useCallback(\r\n    (event: React.MouseEvent<HTMLDivElement>) => {\r\n      if (containerRef.current) {\r\n        const rect = containerRef.current.getBoundingClientRect();\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n        addRipple(x, y);\r\n      }\r\n    },\r\n    [addRipple],\r\n  );\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`relative inline-block overflow-hidden ${className}`}\r\n      onMouseMove={handleMouseMove}\r\n    >\r\n      {ripples.map((ripple) => (\r\n        <motion.div\r\n          key={ripple.key}\r\n          className=\"absolute rounded-full pointer-events-none text-primary\"\r\n          style={{\r\n            left: ripple.x - rippleSize / 2,\r\n            top: ripple.y - rippleSize / 2,\r\n            width: rippleSize,\r\n            height: rippleSize,\r\n            background: rippleColor,\r\n          }}\r\n          initial={{ scale: 0, opacity: 0.5 }}\r\n          animate={{ scale: 1, opacity: 0 }}\r\n          transition={{ duration: rippleDuration, ease: \"easeOut\" }}\r\n        />\r\n      ))}\r\n      <div className=\"relative z-10\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TextRippleEffect: React.FC<TextHoverEffectProps> = ({\r\n  children,\r\n  className = \"\",\r\n}) => {\r\n  return (\r\n    <div className={`inline-block ${className}`}>\r\n      {children.split(\"\").map((char, index) => (\r\n        <motion.span\r\n          key={index}\r\n          className=\"inline-block text-primary\"\r\n          initial={{ y: 0 }}\r\n          whileHover={{ y: -5 }}\r\n          transition={{ type: \"spring\", stiffness: 500, damping: 10 }}\r\n        >\r\n          {char == \" \" ? \"\\u00A0\" : char}\r\n        </motion.span>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { TextAndMouseRippleEffect, MouseRippleEffect, TextRippleEffect };\r\n",
      "path": "ui/chromatic-ripple-effect.tsx",
      "target": "components/ui/chromatic-ripple-effect.tsx"
    }
  ]
}